<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-ban-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details&#10;        ConfigurationSection banSection = plugin.getConfig().getConfigurationSection(&quot;bans.&quot; + banId);&#10;        String reason = banSection.getString(&quot;reason&quot;);&#10;        String durationStr = banSection.getString(&quot;duration&quot;);&#10;        long duration = parseDuration(durationStr);&#10;        // Calculate expiry time (-1 duration means permanent ban)&#10;        long expiryTime = duration == -1 ? -1 : System.currentTimeMillis() + duration;&#10;&#10;        String banner = sender instanceof org.bukkit.command.ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName();&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;BAN&quot;,&#10;            banner,&#10;            reason,&#10;            duration&#10;        );&#10;&#10;        // Save ban in config&#10;        String banPath = &quot;banned-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(banPath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(banPath + &quot;.by&quot;, banner);&#10;        plugin.getBansConfig().set(banPath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(banPath + &quot;.duration&quot;, duration);&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String formattedDuration = duration == -1 ? &quot;Permanent&quot; : formatDuration(duration);&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, formattedDuration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;&#10;        String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;        String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;        try {&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    return 24 * 60 * 60 * 1000; // Default 1 day&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; day(s)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; hour(s)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; minute(s)&quot;;&#10;        } else {&#10;            return seconds + &quot; second(s)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-ban-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details&#10;        ConfigurationSection banSection = plugin.getConfig().getConfigurationSection(&quot;bans.&quot; + banId);&#10;        String reason = banSection.getString(&quot;reason&quot;);&#10;        String durationStr = banSection.getString(&quot;duration&quot;);&#10;        long duration = parseDuration(durationStr);&#10;        // Calculate expiry time (-1 duration means permanent ban)&#10;        long expiryTime = duration == -1 ? -1 : System.currentTimeMillis() + duration;&#10;&#10;        String banner = sender instanceof org.bukkit.command.ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName();&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;BAN&quot;,&#10;            banner,&#10;            reason,&#10;            duration&#10;        );&#10;&#10;        // Save ban in config&#10;        String banPath = &quot;banned-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(banPath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(banPath + &quot;.by&quot;, banner);&#10;        plugin.getBansConfig().set(banPath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(banPath + &quot;.duration&quot;, duration);&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String formattedDuration = duration == -1 ? &quot;Permanent&quot; : formatDuration(duration);&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, formattedDuration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return -1; // Permanent ban by default&#10;        }&#10;&#10;        try {&#10;            // Check if it's a special value&#10;            if (duration.equalsIgnoreCase(&quot;permanent&quot;) || duration.equals(&quot;-1&quot;)) {&#10;                return -1;&#10;            }&#10;&#10;            String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;            String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    plugin.getLogger().warning(&quot;Invalid duration format in config: &quot; + duration + &quot;. Using permanent ban.&quot;);&#10;                    return -1;&#10;            }&#10;        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {&#10;            plugin.getLogger().warning(&quot;Invalid duration format in config: &quot; + duration + &quot;. Using permanent ban.&quot;);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; day(s)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; hour(s)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; minute(s)&quot;;&#10;        } else {&#10;            return seconds + &quot; second(s)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;    private File historyFile;&#10;    private FileConfiguration historyConfig;&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml and history.yml files&#10;        createBansFile();&#10;        createHistoryFile();&#10;&#10;        // Create TabCompleter instance&#10;        BanTabCompleter tabCompleter = new BanTabCompleter(this);&#10;&#10;        // Register commands and tab completers&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;        getCommand(&quot;history&quot;).setExecutor(new HistoryCommand(this));&#10;&#10;        // Register tab completers&#10;        getCommand(&quot;ban&quot;).setTabCompleter(tabCompleter);&#10;        getCommand(&quot;mute&quot;).setTabCompleter(tabCompleter);&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    private void createHistoryFile() {&#10;        historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        if (!historyFile.exists()) {&#10;            saveResource(&quot;history.yml&quot;, false);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getHistoryConfig() {&#10;        return historyConfig;&#10;    }&#10;&#10;    public void saveHistoryConfig() {&#10;        try {&#10;            historyConfig.save(historyFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save history.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void addToHistory(String uuid, String type, String by, String reason, long duration) {&#10;        String key = uuid + &quot;.&quot; + System.currentTimeMillis();&#10;        historyConfig.set(key + &quot;.type&quot;, type);&#10;        historyConfig.set(key + &quot;.by&quot;, by);&#10;        historyConfig.set(key + &quot;.reason&quot;, reason);&#10;        historyConfig.set(key + &quot;.date&quot;, System.currentTimeMillis());&#10;        historyConfig.set(key + &quot;.duration&quot;, duration);&#10;        saveHistoryConfig();&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;    private File historyFile;&#10;    private FileConfiguration historyConfig;&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml and history.yml files&#10;        createBansFile();&#10;        createHistoryFile();&#10;&#10;        // Create TabCompleter instance&#10;        BanTabCompleter tabCompleter = new BanTabCompleter(this);&#10;&#10;        // Register commands and tab completers&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;        getCommand(&quot;history&quot;).setExecutor(new HistoryCommand(this));&#10;        getCommand(&quot;smartbans&quot;).setExecutor(new ReloadCommand(this));&#10;&#10;        // Register tab completers&#10;        getCommand(&quot;ban&quot;).setTabCompleter(tabCompleter);&#10;        getCommand(&quot;mute&quot;).setTabCompleter(tabCompleter);&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    private void createHistoryFile() {&#10;        historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        if (!historyFile.exists()) {&#10;            saveResource(&quot;history.yml&quot;, false);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getHistoryConfig() {&#10;        return historyConfig;&#10;    }&#10;&#10;    public void saveHistoryConfig() {&#10;        try {&#10;            historyConfig.save(historyFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save history.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadHistoryConfig() {&#10;        if (historyFile == null) {&#10;            historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public void addToHistory(String uuid, String type, String by, String reason, long duration) {&#10;        String key = uuid + &quot;.&quot; + System.currentTimeMillis();&#10;        historyConfig.set(key + &quot;.type&quot;, type);&#10;        historyConfig.set(key + &quot;.by&quot;, by);&#10;        historyConfig.set(key + &quot;.reason&quot;, reason);&#10;        historyConfig.set(key + &quot;.date&quot;, System.currentTimeMillis());&#10;        historyConfig.set(key + &quot;.duration&quot;, duration);&#10;        saveHistoryConfig();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/HistoryCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/HistoryCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class HistoryCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;    private final SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm:ss&quot;);&#10;&#10;    public HistoryCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.RED + &quot;Dieser Befehl kann nur von Spielern ausgeführt werden!&quot;);&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.history&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.history-usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.invalid-player&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;        openHistoryGUI(player, target);&#10;        return true;&#10;    }&#10;&#10;    private void openHistoryGUI(Player viewer, OfflinePlayer target) {&#10;        String title = colorize(plugin.getConfig().getString(&quot;messages.history.title&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName()));&#10;        Inventory gui = Bukkit.createInventory(null, 54, title);&#10;&#10;        ConfigurationSection history = plugin.getHistoryConfig().getConfigurationSection(target.getUniqueId().toString());&#10;        if (history == null) {&#10;            ItemStack noHistory = new ItemStack(Material.BARRIER);&#10;            ItemMeta meta = noHistory.getItemMeta();&#10;            meta.setDisplayName(colorize(plugin.getConfig().getString(&quot;messages.history.no-entries&quot;)));&#10;            noHistory.setItemMeta(meta);&#10;            gui.setItem(22, noHistory);&#10;            viewer.openInventory(gui);&#10;            return;&#10;        }&#10;&#10;        List&lt;ItemStack&gt; historyItems = new ArrayList&lt;&gt;();&#10;        for (String key : history.getKeys(false)) {&#10;            ConfigurationSection entry = history.getConfigurationSection(key);&#10;            ItemStack paper = new ItemStack(Material.PAPER);&#10;            ItemMeta meta = paper.getItemMeta();&#10;&#10;            String type = entry.getString(&quot;type&quot;);&#10;            String by = entry.getString(&quot;by&quot;);&#10;            String reason = entry.getString(&quot;reason&quot;);&#10;            long date = entry.getLong(&quot;date&quot;);&#10;            long duration = entry.getLong(&quot;duration&quot;);&#10;&#10;            meta.setDisplayName(colorize(plugin.getConfig().getString(&quot;messages.history.entry.&quot; + type.toLowerCase())));&#10;&#10;            List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.by&quot;)&#10;                    .replace(&quot;{staff}&quot;, by)));&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.reason&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)));&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.date&quot;)&#10;                    .replace(&quot;{date}&quot;, dateFormat.format(new Date(date)))));&#10;&#10;            if (duration == -1) {&#10;                lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.duration.permanent&quot;)));&#10;            } else {&#10;                lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.duration.temporary&quot;)&#10;                        .replace(&quot;{duration}&quot;, formatDuration(duration))));&#10;            }&#10;&#10;            meta.setLore(lore);&#10;            paper.setItemMeta(meta);&#10;            historyItems.add(paper);&#10;        }&#10;&#10;        for (int i = 0; i &lt; Math.min(historyItems.size(), 54); i++) {&#10;            gui.setItem(i, historyItems.get(i));&#10;        }&#10;&#10;        viewer.openInventory(gui);&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; Tag(e)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; Stunde(n)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; Minute(n)&quot;;&#10;        } else {&#10;            return seconds + &quot; Sekunde(n)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class HistoryCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;    private final SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm:ss&quot;);&#10;&#10;    public HistoryCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.RED + &quot;Dieser Befehl kann nur von Spielern ausgeführt werden!&quot;);&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.history&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.history-usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.invalid-player&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;        openHistoryGUI(player, target);&#10;        return true;&#10;    }&#10;&#10;    private void openHistoryGUI(Player viewer, OfflinePlayer target) {&#10;        String title = colorize(plugin.getConfig().getString(&quot;messages.history.title&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName()));&#10;        Inventory gui = Bukkit.createInventory(null, 54, title);&#10;&#10;        ConfigurationSection history = plugin.getHistoryConfig().getConfigurationSection(target.getUniqueId().toString());&#10;        if (history == null) {&#10;            ItemStack noHistory = new ItemStack(Material.BARRIER);&#10;            ItemMeta meta = noHistory.getItemMeta();&#10;            meta.setDisplayName(colorize(plugin.getConfig().getString(&quot;messages.history.no-entries&quot;)));&#10;            noHistory.setItemMeta(meta);&#10;            gui.setItem(22, noHistory);&#10;            viewer.openInventory(gui);&#10;            return;&#10;        }&#10;&#10;        List&lt;ItemStack&gt; historyItems = new ArrayList&lt;&gt;();&#10;        for (String key : history.getKeys(false)) {&#10;            ConfigurationSection entry = history.getConfigurationSection(key);&#10;            ItemStack paper = new ItemStack(Material.PAPER);&#10;            ItemMeta meta = paper.getItemMeta();&#10;&#10;            String type = entry.getString(&quot;type&quot;);&#10;            String by = entry.getString(&quot;by&quot;);&#10;            String reason = entry.getString(&quot;reason&quot;);&#10;            long date = entry.getLong(&quot;date&quot;);&#10;            long duration = entry.getLong(&quot;duration&quot;);&#10;&#10;            meta.setDisplayName(colorize(plugin.getConfig().getString(&quot;messages.history.entry.&quot; + type.toLowerCase())));&#10;&#10;            List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.by&quot;)&#10;                    .replace(&quot;{staff}&quot;, by)));&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.reason&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)));&#10;            lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.date&quot;)&#10;                    .replace(&quot;{date}&quot;, dateFormat.format(new Date(date)))));&#10;&#10;            if (duration == -1) {&#10;                lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.duration.permanent&quot;)));&#10;            } else {&#10;                lore.add(colorize(plugin.getConfig().getString(&quot;messages.history.entry.duration.temporary&quot;)&#10;                        .replace(&quot;{duration}&quot;, formatDuration(duration))));&#10;            }&#10;&#10;            meta.setLore(lore);&#10;            paper.setItemMeta(meta);&#10;            historyItems.add(paper);&#10;        }&#10;&#10;        for (int i = 0; i &lt; Math.min(historyItems.size(), 54); i++) {&#10;            gui.setItem(i, historyItems.get(i));&#10;        }&#10;&#10;        viewer.openInventory(gui);&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; day(s)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; hour(s)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; minute(s)&quot;;&#10;        } else {&#10;            return seconds + &quot; second(s)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline() &amp;&amp; !(sender instanceof ConsoleCommandSender)) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', plugin.getConfig().getString(&quot;messages.cannot-mute-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long expiryTime = System.currentTimeMillis() + parseDuration(duration);&#10;&#10;        String uuid = target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.expires&quot;, expiryTime);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-by&quot;, sender instanceof ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName());&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-at&quot;, System.currentTimeMillis());&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + uuid + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        plugin.saveBansConfig();&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Sekunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minuten zu Millisekunden&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Stunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Tage zu Millisekunden&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline() &amp;&amp; !(sender instanceof ConsoleCommandSender)) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', plugin.getConfig().getString(&quot;messages.cannot-mute-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long durationMs = parseDuration(duration);&#10;        long expiryTime = System.currentTimeMillis() + durationMs;&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;MUTE&quot;,&#10;            sender.getName(),&#10;            reason,&#10;            durationMs&#10;        );&#10;&#10;        // Save mute in config&#10;        String mutePath = &quot;muted-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(mutePath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(mutePath + &quot;.by&quot;, sender.getName());&#10;        plugin.getBansConfig().set(mutePath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(mutePath + &quot;.expires&quot;, expiryTime);&#10;        plugin.saveBansConfig();&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + target.getUniqueId().toString() + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Sekunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minuten zu Millisekunden&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Stunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Tage zu Millisekunden&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerJoinListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerJoinListener.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerJoinEvent;&#10;import java.util.Date;&#10;&#10;public class PlayerJoinListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerJoinListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerJoin(PlayerJoinEvent event) {&#10;        String uuid = event.getPlayer().getUniqueId().toString();&#10;&#10;        // Check if player is banned&#10;        if (!plugin.getBansConfig().contains(&quot;banned-players.&quot; + uuid)) {&#10;            return; // Player is not banned&#10;        }&#10;&#10;        // Get ban details&#10;        long expiryTime = plugin.getBansConfig().getLong(&quot;banned-players.&quot; + uuid + &quot;.expires&quot;);&#10;        String reason = plugin.getBansConfig().getString(&quot;banned-players.&quot; + uuid + &quot;.reason&quot;);&#10;&#10;        // Check if ban has expired&#10;        if (System.currentTimeMillis() &gt;= expiryTime) {&#10;            // Ban has expired, remove it&#10;            plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid, null);&#10;            plugin.saveBansConfig();&#10;            return; // Let player join&#10;        }&#10;&#10;        // Ban is still active, kick the player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;&#10;        event.getPlayer().kickPlayer(colorize(kickMessage));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerJoinEvent;&#10;import java.util.Date;&#10;&#10;public class PlayerJoinListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerJoinListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerJoin(PlayerJoinEvent event) {&#10;        String uuid = event.getPlayer().getUniqueId().toString();&#10;        String banPath = &quot;banned-players.&quot; + uuid;&#10;&#10;        // Check if player is banned&#10;        if (!plugin.getBansConfig().contains(banPath)) {&#10;            return; // Player is not banned&#10;        }&#10;&#10;        // Get ban details&#10;        long banTime = plugin.getBansConfig().getLong(banPath + &quot;.time&quot;);&#10;        long duration = plugin.getBansConfig().getLong(banPath + &quot;.duration&quot;);&#10;        String reason = plugin.getBansConfig().getString(banPath + &quot;.reason&quot;);&#10;&#10;        // Calculate expiry time (-1 duration means permanent ban)&#10;        if (duration == -1) {&#10;            // Permanent ban&#10;            kickBannedPlayer(event, reason, -1);&#10;            return;&#10;        }&#10;&#10;        long expiryTime = banTime + duration;&#10;&#10;        // Check if ban has expired&#10;        if (System.currentTimeMillis() &gt;= expiryTime) {&#10;            // Ban has expired, remove it&#10;            plugin.getBansConfig().set(banPath, null);&#10;            plugin.saveBansConfig();&#10;            return; // Let player join&#10;        }&#10;&#10;        // Ban is still active, kick the player&#10;        kickBannedPlayer(event, reason, expiryTime);&#10;    }&#10;&#10;    private void kickBannedPlayer(PlayerJoinEvent event, String reason, long expiryTime) {&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, expiryTime == -1 ? &quot;Never&quot; : new Date(expiryTime).toString());&#10;&#10;        event.getPlayer().kickPlayer(colorize(kickMessage));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ReloadCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ReloadCommand.java" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;&#10;public class ReloadCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public ReloadCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.reload&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Reload all configurations&#10;        plugin.reloadConfig();&#10;        plugin.reloadBansConfig();&#10;        plugin.reloadHistoryConfig();&#10;        &#10;        sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.reload-success&quot;)));&#10;        return true;&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/config.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/config.yml" />
              <option name="originalContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;settings:&#10;  use-id-system:&#10;    ban: true    # true = use IDs (1,2,3), false = use reasons directly&#10;    mute: true   # true = use IDs (1,2,3), false = use reasons directly&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;  history:&#10;    title: &quot;&amp;8History of {player}&quot;&#10;    no-entries: &quot;&amp;cNo history entries found&quot;&#10;    entry:&#10;      ban: &quot;&amp;eBan&quot;&#10;      mute: &quot;&amp;eMute&quot;&#10;      by: &quot;&amp;7By: &amp;f{staff}&quot;&#10;      reason: &quot;&amp;7Reason: &amp;f{reason}&quot;&#10;      date: &quot;&amp;7Date: &amp;f{date}&quot;&#10;      duration:&#10;        permanent: &quot;&amp;7Duration: &amp;fPermanent&quot;&#10;        temporary: &quot;&amp;7Duration: &amp;f{duration}&quot;&#10;  invalid-player: &quot;&amp;cPlease enter a valid player name&quot;&#10;  history-usage: &quot;&amp;cUsage: /history &lt;player&gt;&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;&#10;" />
              <option name="updatedContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;settings:&#10;  use-id-system:&#10;    ban: true    # true = use IDs (1,2,3), false = use reasons directly&#10;    mute: true   # true = use IDs (1,2,3), false = use reasons directly&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;  history:&#10;    title: &quot;&amp;8History of {player}&quot;&#10;    no-entries: &quot;&amp;cNo history entries found&quot;&#10;    entry:&#10;      ban: &quot;&amp;eBan&quot;&#10;      mute: &quot;&amp;eMute&quot;&#10;      by: &quot;&amp;7By: &amp;f{staff}&quot;&#10;      reason: &quot;&amp;7Reason: &amp;f{reason}&quot;&#10;      date: &quot;&amp;7Date: &amp;f{date}&quot;&#10;      duration:&#10;        permanent: &quot;&amp;7Duration: &amp;fPermanent&quot;&#10;        temporary: &quot;&amp;7Duration: &amp;f{duration}&quot;&#10;  invalid-player: &quot;&amp;cPlease enter a valid player name&quot;&#10;  history-usage: &quot;&amp;cUsage: /history &lt;player&gt;&quot;&#10;  reload-success: &quot;&amp;aConfiguration successfully reloaded!&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/history.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/history.yml" />
              <option name="updatedContent" value="# History file for bans and mutes&#10;# Format:&#10;# uuid:&#10;#   - type: BAN/MUTE&#10;#     by: staff-name&#10;#     reason: reason&#10;#     date: timestamp&#10;#     duration: duration-in-milliseconds (or -1 for permanent)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/plugin.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/plugin.yml" />
              <option name="originalContent" value="name: Smartbans&#10;version: 'BETA 1.3'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;  mute:&#10;    description: Mute a player with configurable reasons&#10;    usage: /mute &lt;player&gt; &lt;id&gt;&#10;  unmute:&#10;    description: Unmute a player&#10;    usage: /unmute &lt;player&gt;&#10;  history:&#10;    description: View a player's ban and mute history&#10;    usage: /history &lt;player&gt;&#10;  smartbans:&#10;    description: Reload the plugin configuration&#10;    usage: /smartbans reload&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: op&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: op&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: op&#10;  banplugin.mute:&#10;    description: Allows muting players&#10;    default: op&#10;  banplugin.unmute:&#10;    description: Allows unmuting players&#10;    default: op&#10;  banplugin.bypass:&#10;    description: Prevents being banned, kicked or muted by other staff members&#10;    default: op&#10;  banplugin.history:&#10;    description: Allows viewing ban and mute history of players&#10;    default: op&#10;  banplugin.reload:&#10;    description: Allows reloading the plugin configuration&#10;    default: op&#10;  banplugin.admin:&#10;    description: Grants all administrative permissions&#10;    default: op&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;      banplugin.mute: true&#10;      banplugin.unmute: true&#10;      banplugin.history: true&#10;      banplugin.reload: true&#10;  banplugin.*:&#10;    description: Grants all plugin permissions including bypass&#10;    default: op&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true&#10;" />
              <option name="updatedContent" value="name: Smartbans&#10;version: 'BETA 1.4'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;  mute:&#10;    description: Mute a player with configurable reasons&#10;    usage: /mute &lt;player&gt; &lt;id&gt;&#10;  unmute:&#10;    description: Unmute a player&#10;    usage: /unmute &lt;player&gt;&#10;  history:&#10;    description: View a player's ban and mute history&#10;    usage: /history &lt;player&gt;&#10;  smartbans:&#10;    description: Reload the plugin configuration&#10;    usage: /smartbans reload&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: op&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: op&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: op&#10;  banplugin.mute:&#10;    description: Allows muting players&#10;    default: op&#10;  banplugin.unmute:&#10;    description: Allows unmuting players&#10;    default: op&#10;  banplugin.bypass:&#10;    description: Prevents being banned, kicked or muted by other staff members&#10;    default: op&#10;  banplugin.history:&#10;    description: Allows viewing ban and mute history of players&#10;    default: op&#10;  banplugin.reload:&#10;    description: Allows reloading the plugin configuration&#10;    default: op&#10;  banplugin.admin:&#10;    description: Grants all administrative permissions&#10;    default: op&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;      banplugin.mute: true&#10;      banplugin.unmute: true&#10;      banplugin.history: true&#10;      banplugin.reload: true&#10;  banplugin.*:&#10;    description: Grants all plugin permissions including bypass&#10;    default: op&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>