<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-ban-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details&#10;        ConfigurationSection banSection = plugin.getConfig().getConfigurationSection(&quot;bans.&quot; + banId);&#10;        String reason = banSection.getString(&quot;reason&quot;);&#10;        String durationStr = banSection.getString(&quot;duration&quot;);&#10;        long duration = parseDuration(durationStr);&#10;        // Calculate expiry time (-1 duration means permanent ban)&#10;        long expiryTime = duration == -1 ? -1 : System.currentTimeMillis() + duration;&#10;&#10;        String banner = sender instanceof org.bukkit.command.ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName();&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;BAN&quot;,&#10;            banner,&#10;            reason,&#10;            duration&#10;        );&#10;&#10;        // Save ban in config&#10;        String banPath = &quot;banned-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(banPath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(banPath + &quot;.by&quot;, banner);&#10;        plugin.getBansConfig().set(banPath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(banPath + &quot;.duration&quot;, duration);&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String formattedDuration = duration == -1 ? &quot;Permanent&quot; : formatDuration(duration);&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, formattedDuration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;&#10;        String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;        String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;        try {&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    return 24 * 60 * 60 * 1000; // Default 1 day&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; day(s)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; hour(s)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; minute(s)&quot;;&#10;        } else {&#10;            return seconds + &quot; second(s)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;) || onlineTarget.isOp()) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details&#10;        ConfigurationSection banSection = plugin.getConfig().getConfigurationSection(&quot;bans.&quot; + banId);&#10;        String reason = banSection.getString(&quot;reason&quot;);&#10;        String durationStr = banSection.getString(&quot;duration&quot;);&#10;        long duration = parseDuration(durationStr);&#10;        // Calculate expiry time (-1 duration means permanent ban)&#10;        long expiryTime = duration == -1 ? -1 : System.currentTimeMillis() + duration;&#10;&#10;        String banner = sender instanceof org.bukkit.command.ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName();&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;BAN&quot;,&#10;            banner,&#10;            reason,&#10;            duration&#10;        );&#10;&#10;        // Save ban in config&#10;        String banPath = &quot;banned-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(banPath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(banPath + &quot;.by&quot;, banner);&#10;        plugin.getBansConfig().set(banPath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(banPath + &quot;.duration&quot;, duration);&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String formattedDuration = duration == -1 ? &quot;Permanent&quot; : formatDuration(duration);&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, formattedDuration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return -1; // Permanent ban by default&#10;        }&#10;&#10;        try {&#10;            // Check if it's a special value&#10;            if (duration.equalsIgnoreCase(&quot;permanent&quot;) || duration.equals(&quot;-1&quot;)) {&#10;                return -1;&#10;            }&#10;&#10;            String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;            String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    plugin.getLogger().warning(&quot;Invalid duration format in config: &quot; + duration + &quot;. Using permanent ban.&quot;);&#10;                    return -1;&#10;            }&#10;        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {&#10;            plugin.getLogger().warning(&quot;Invalid duration format in config: &quot; + duration + &quot;. Using permanent ban.&quot;);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long duration) {&#10;        long seconds = duration / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot; day(s)&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot; hour(s)&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot; minute(s)&quot;;&#10;        } else {&#10;            return seconds + &quot; second(s)&quot;;&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;    private File historyFile;&#10;    private FileConfiguration historyConfig;&#10;    private Set&lt;UUID&gt; frozenPlayers;&#10;    private Set&lt;UUID&gt; vanishedPlayers; // Add this field&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Initialize sets&#10;        frozenPlayers = new HashSet&lt;&gt;();&#10;        vanishedPlayers = new HashSet&lt;&gt;(); // Initialize vanished players set&#10;&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml and history.yml files&#10;        createBansFile();&#10;        createHistoryFile();&#10;&#10;        // Create TabCompleter instance&#10;        BanTabCompleter tabCompleter = new BanTabCompleter(this);&#10;&#10;        // Register commands and tab completers&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;        getCommand(&quot;history&quot;).setExecutor(new HistoryCommand(this));&#10;        getCommand(&quot;smartbans&quot;).setExecutor(new ReloadCommand(this));&#10;        getCommand(&quot;freeze&quot;).setExecutor(new FreezeCommand(this));&#10;        getCommand(&quot;unfreeze&quot;).setExecutor(new UnfreezeCommand(this));&#10;        getCommand(&quot;examine&quot;).setExecutor(new ExamineCommand(this));&#10;        getCommand(&quot;vanish&quot;).setExecutor(new VanishCommand(this));&#10;        getCommand(&quot;invsee&quot;).setExecutor(new InvseeCommand(this));&#10;&#10;        // Register tab completers&#10;        getCommand(&quot;ban&quot;).setTabCompleter(tabCompleter);&#10;        getCommand(&quot;mute&quot;).setTabCompleter(tabCompleter);&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new PlayerFreezeListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ExamineListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    private void createHistoryFile() {&#10;        historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        if (!historyFile.exists()) {&#10;            saveResource(&quot;history.yml&quot;, false);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getHistoryConfig() {&#10;        return historyConfig;&#10;    }&#10;&#10;    public void saveHistoryConfig() {&#10;        try {&#10;            historyConfig.save(historyFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save history.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadHistoryConfig() {&#10;        if (historyFile == null) {&#10;            historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public void addToHistory(String uuid, String type, String by, String reason, long duration) {&#10;        String key = uuid + &quot;.&quot; + System.currentTimeMillis();&#10;        historyConfig.set(key + &quot;.type&quot;, type);&#10;        historyConfig.set(key + &quot;.by&quot;, by);&#10;        historyConfig.set(key + &quot;.reason&quot;, reason);&#10;        historyConfig.set(key + &quot;.date&quot;, System.currentTimeMillis());&#10;        historyConfig.set(key + &quot;.duration&quot;, duration);&#10;        saveHistoryConfig();&#10;    }&#10;&#10;    public Set&lt;UUID&gt; getFrozenPlayers() {&#10;        return frozenPlayers;&#10;    }&#10;&#10;    public Set&lt;UUID&gt; getVanishedPlayers() {&#10;        return vanishedPlayers;&#10;    }&#10;&#10;    public String colorize(String message) {&#10;        return message != null ? org.bukkit.ChatColor.translateAlternateColorCodes('&amp;', message) : &quot;&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;    private File historyFile;&#10;    private FileConfiguration historyConfig;&#10;    private Set&lt;UUID&gt; frozenPlayers;&#10;    private Set&lt;UUID&gt; vanishedPlayers; // Add this field&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Initialize sets&#10;        frozenPlayers = new HashSet&lt;&gt;();&#10;        vanishedPlayers = new HashSet&lt;&gt;(); // Initialize vanished players set&#10;&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml and history.yml files&#10;        createBansFile();&#10;        createHistoryFile();&#10;&#10;        // Create TabCompleter instance&#10;        BanTabCompleter tabCompleter = new BanTabCompleter(this);&#10;&#10;        // Register commands and tab completers&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;        getCommand(&quot;history&quot;).setExecutor(new HistoryCommand(this));&#10;        getCommand(&quot;smartbans&quot;).setExecutor(new ReloadCommand(this));&#10;        getCommand(&quot;freeze&quot;).setExecutor(new FreezeCommand(this));&#10;        getCommand(&quot;unfreeze&quot;).setExecutor(new UnfreezeCommand(this));&#10;        getCommand(&quot;examine&quot;).setExecutor(new ExamineCommand(this));&#10;        getCommand(&quot;vanish&quot;).setExecutor(new VanishCommand(this));&#10;        getCommand(&quot;invsee&quot;).setExecutor(new InvseeCommand(this));&#10;        getCommand(&quot;clearinv&quot;).setExecutor(new ClearInventoryCommand(this));&#10;&#10;        // Register tab completers&#10;        getCommand(&quot;ban&quot;).setTabCompleter(tabCompleter);&#10;        getCommand(&quot;mute&quot;).setTabCompleter(tabCompleter);&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new PlayerFreezeListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ExamineListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    private void createHistoryFile() {&#10;        historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        if (!historyFile.exists()) {&#10;            saveResource(&quot;history.yml&quot;, false);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getHistoryConfig() {&#10;        return historyConfig;&#10;    }&#10;&#10;    public void saveHistoryConfig() {&#10;        try {&#10;            historyConfig.save(historyFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save history.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadHistoryConfig() {&#10;        if (historyFile == null) {&#10;            historyFile = new File(getDataFolder(), &quot;history.yml&quot;);&#10;        }&#10;        historyConfig = YamlConfiguration.loadConfiguration(historyFile);&#10;    }&#10;&#10;    public void addToHistory(String uuid, String type, String by, String reason, long duration) {&#10;        String key = uuid + &quot;.&quot; + System.currentTimeMillis();&#10;        historyConfig.set(key + &quot;.type&quot;, type);&#10;        historyConfig.set(key + &quot;.by&quot;, by);&#10;        historyConfig.set(key + &quot;.reason&quot;, reason);&#10;        historyConfig.set(key + &quot;.date&quot;, System.currentTimeMillis());&#10;        historyConfig.set(key + &quot;.duration&quot;, duration);&#10;        saveHistoryConfig();&#10;    }&#10;&#10;    public Set&lt;UUID&gt; getFrozenPlayers() {&#10;        return frozenPlayers;&#10;    }&#10;&#10;    public Set&lt;UUID&gt; getVanishedPlayers() {&#10;        return vanishedPlayers;&#10;    }&#10;&#10;    public String colorize(String message) {&#10;        return message != null ? org.bukkit.ChatColor.translateAlternateColorCodes('&amp;', message) : &quot;&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ClearInventoryCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ClearInventoryCommand.java" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class ClearInventoryCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public ClearInventoryCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.clearinv&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // If no args, clear own inventory (if sender is player)&#10;        if (args.length == 0) {&#10;            if (!(sender instanceof Player)) {&#10;                sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.clearinv.usage&quot;)));&#10;                return true;&#10;            }&#10;            Player player = (Player) sender;&#10;            clearInventory(player);&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.clearinv.cleared-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Clear target player's inventory&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent clearing inventory of staff members&#10;        if (target.hasPermission(&quot;banplugin.clearinv.bypass&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        clearInventory(target);&#10;        sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.clearinv.cleared-other&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())));&#10;        target.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.clearinv.cleared-by&quot;)&#10;                .replace(&quot;{staff}&quot;, sender.getName())));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void clearInventory(Player player) {&#10;        player.getInventory().clear();&#10;        player.getInventory().setArmorContents(null);&#10;        player.getInventory().setItemInOffHand(null);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ExamineCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ExamineCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.Material;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;import org.bukkit.inventory.meta.SkullMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ExamineCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public ExamineCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(plugin.colorize(&quot;&amp;cThis command can only be used by players!&quot;));&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.examine&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length != 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.offline&quot;)));&#10;            return true;&#10;        }&#10;&#10;        openExamineGUI((Player) sender, target);&#10;        return true;&#10;    }&#10;&#10;    private void openExamineGUI(Player staff, Player target) {&#10;        Inventory gui = Bukkit.createInventory(null, 27, plugin.colorize(&#10;                plugin.getConfig().getString(&quot;messages.examine.title&quot;)&#10;                        .replace(&quot;{player}&quot;, target.getName())&#10;        ));&#10;&#10;        // Spielerkopf in der Mitte&#10;        ItemStack head = new ItemStack(Material.PLAYER_HEAD);&#10;        SkullMeta skullMeta = (SkullMeta) head.getItemMeta();&#10;        skullMeta.setOwningPlayer(target);&#10;        skullMeta.setDisplayName(plugin.colorize(&quot;&amp;e&quot; + target.getName()));&#10;        List&lt;String&gt; headLore = new ArrayList&lt;&gt;();&#10;        headLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.name&quot;)&#10;                .replace(&quot;{name}&quot;, target.getName())));&#10;        headLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.uuid&quot;)&#10;                .replace(&quot;{uuid}&quot;, target.getUniqueId().toString())));&#10;        skullMeta.setLore(headLore);&#10;        head.setItemMeta(skullMeta);&#10;        gui.setItem(13, head);&#10;&#10;        // Spieler-Infos (Paper mit Details)&#10;        ItemStack info = new ItemStack(Material.PAPER);&#10;        ItemMeta infoMeta = info.getItemMeta();&#10;        infoMeta.setDisplayName(plugin.colorize(&quot;&amp;ePlayer Information&quot;));&#10;        List&lt;String&gt; infoLore = new ArrayList&lt;&gt;();&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.ip&quot;)&#10;                .replace(&quot;{ip}&quot;, target.getAddress().getAddress().getHostAddress())));&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.location&quot;)&#10;                .replace(&quot;{world}&quot;, target.getWorld().getName())&#10;                .replace(&quot;{x}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getX()))&#10;                .replace(&quot;{y}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getY()))&#10;                .replace(&quot;{z}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getZ()))));&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.gamemode&quot;)&#10;                .replace(&quot;{gamemode}&quot;, target.getGameMode().toString())));&#10;        infoMeta.setLore(infoLore);&#10;        info.setItemMeta(infoMeta);&#10;        gui.setItem(11, info);&#10;&#10;        // Status-Infos (Kompass)&#10;        ItemStack status = new ItemStack(Material.COMPASS);&#10;        ItemMeta statusMeta = status.getItemMeta();&#10;        statusMeta.setDisplayName(plugin.colorize(&quot;&amp;ePlayer Status&quot;));&#10;        List&lt;String&gt; statusLore = new ArrayList&lt;&gt;();&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.health&quot;)&#10;                .replace(&quot;{health}&quot;, String.format(&quot;%.1f&quot;, target.getHealth()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.food&quot;)&#10;                .replace(&quot;{food}&quot;, String.valueOf(target.getFoodLevel()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.exp&quot;)&#10;                .replace(&quot;{exp}&quot;, String.valueOf(target.getLevel()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.op&quot;)&#10;                .replace(&quot;{op}&quot;, target.isOp() ? &quot;Yes&quot; : &quot;No&quot;)));&#10;        statusMeta.setLore(statusLore);&#10;        status.setItemMeta(statusMeta);&#10;        gui.setItem(15, status);&#10;&#10;        // History-Button (Redstone)&#10;        ItemStack history = new ItemStack(Material.REDSTONE);&#10;        ItemMeta historyMeta = history.getItemMeta();&#10;        historyMeta.setDisplayName(plugin.colorize(&quot;&amp;cView History&quot;));&#10;        List&lt;String&gt; historyLore = new ArrayList&lt;&gt;();&#10;        historyLore.add(plugin.colorize(&quot;&amp;7Click to view&quot;));&#10;        historyLore.add(plugin.colorize(&quot;&amp;7punishment history&quot;));&#10;        historyMeta.setLore(historyLore);&#10;        history.setItemMeta(historyMeta);&#10;        gui.setItem(26, history);&#10;&#10;        staff.openInventory(gui);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.Material;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;import org.bukkit.inventory.meta.SkullMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ExamineCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public ExamineCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(plugin.colorize(&quot;&amp;cThis command can only be used by players!&quot;));&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.examine&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length != 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.offline&quot;)));&#10;            return true;&#10;        }&#10;&#10;        openExamineGUI((Player) sender, target);&#10;        return true;&#10;    }&#10;&#10;    private void openExamineGUI(Player staff, Player target) {&#10;        Inventory gui = Bukkit.createInventory(null, 27, plugin.colorize(&#10;                plugin.getConfig().getString(&quot;messages.examine.title&quot;)&#10;                        .replace(&quot;{player}&quot;, target.getName())&#10;        ));&#10;&#10;        // Player head in the middle&#10;        ItemStack head = new ItemStack(Material.PLAYER_HEAD);&#10;        SkullMeta skullMeta = (SkullMeta) head.getItemMeta();&#10;        skullMeta.setOwningPlayer(target);&#10;        skullMeta.setDisplayName(plugin.colorize(&quot;&amp;e&quot; + target.getName()));&#10;        List&lt;String&gt; headLore = new ArrayList&lt;&gt;();&#10;        headLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.name&quot;)&#10;                .replace(&quot;{name}&quot;, target.getName())));&#10;        headLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.uuid&quot;)&#10;                .replace(&quot;{uuid}&quot;, target.getUniqueId().toString())));&#10;        skullMeta.setLore(headLore);&#10;        head.setItemMeta(skullMeta);&#10;        gui.setItem(13, head);&#10;&#10;        // Player info (Paper with details)&#10;        ItemStack info = new ItemStack(Material.PAPER);&#10;        ItemMeta infoMeta = info.getItemMeta();&#10;        infoMeta.setDisplayName(plugin.colorize(&quot;&amp;ePlayer Information&quot;));&#10;        List&lt;String&gt; infoLore = new ArrayList&lt;&gt;();&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.ip&quot;)&#10;                .replace(&quot;{ip}&quot;, target.getAddress().getAddress().getHostAddress())));&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.location&quot;)&#10;                .replace(&quot;{world}&quot;, target.getWorld().getName())&#10;                .replace(&quot;{x}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getX()))&#10;                .replace(&quot;{y}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getY()))&#10;                .replace(&quot;{z}&quot;, String.format(&quot;%.2f&quot;, target.getLocation().getZ()))));&#10;        infoLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.gamemode&quot;)&#10;                .replace(&quot;{gamemode}&quot;, target.getGameMode().toString())));&#10;        infoMeta.setLore(infoLore);&#10;        info.setItemMeta(infoMeta);&#10;        gui.setItem(11, info);&#10;&#10;        // Status info (Compass)&#10;        ItemStack status = new ItemStack(Material.COMPASS);&#10;        ItemMeta statusMeta = status.getItemMeta();&#10;        statusMeta.setDisplayName(plugin.colorize(&quot;&amp;ePlayer Status&quot;));&#10;        List&lt;String&gt; statusLore = new ArrayList&lt;&gt;();&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.health&quot;)&#10;                .replace(&quot;{health}&quot;, String.format(&quot;%.1f&quot;, target.getHealth()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.food&quot;)&#10;                .replace(&quot;{food}&quot;, String.valueOf(target.getFoodLevel()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.exp&quot;)&#10;                .replace(&quot;{exp}&quot;, String.valueOf(target.getLevel()))));&#10;        statusLore.add(plugin.colorize(plugin.getConfig().getString(&quot;messages.examine.info.op&quot;)&#10;                .replace(&quot;{op}&quot;, target.isOp() ? &quot;Yes&quot; : &quot;No&quot;)));&#10;        statusMeta.setLore(statusLore);&#10;        status.setItemMeta(statusMeta);&#10;        gui.setItem(15, status);&#10;&#10;        // History button (Redstone)&#10;        ItemStack history = new ItemStack(Material.REDSTONE);&#10;        ItemMeta historyMeta = history.getItemMeta();&#10;        historyMeta.setDisplayName(plugin.colorize(&quot;&amp;cView History&quot;));&#10;        List&lt;String&gt; historyLore = new ArrayList&lt;&gt;();&#10;        historyLore.add(plugin.colorize(&quot;&amp;7Click to view&quot;));&#10;        historyLore.add(plugin.colorize(&quot;&amp;7punishment history&quot;));&#10;        historyMeta.setLore(historyLore);&#10;        history.setItemMeta(historyMeta);&#10;        gui.setItem(26, history);&#10;&#10;        staff.openInventory(gui);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ExamineListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ExamineListener.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;&#10;public class ExamineListener implements Listener {&#10;    private final BanPlugin plugin;&#10;&#10;    public ExamineListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        String title = event.getView().getTitle();&#10;        if (!title.contains(&quot;Examining&quot;)) {&#10;            return;&#10;        }&#10;&#10;        event.setCancelled(true);&#10;&#10;        if (event.getCurrentItem() == null || event.getCurrentItem().getType() == Material.AIR) {&#10;            return;&#10;        }&#10;&#10;        if (event.getCurrentItem().getType() == Material.REDSTONE) {&#10;            Player staff = (Player) event.getWhoClicked();&#10;            String targetName = title.substring(title.lastIndexOf(&quot; &quot;) + 1);&#10;&#10;            // Schließe das Examine-GUI&#10;            staff.closeInventory();&#10;&#10;            // Führe den History-Command aus&#10;            Bukkit.dispatchCommand(staff, &quot;history &quot; + targetName);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;&#10;public class ExamineListener implements Listener {&#10;    private final BanPlugin plugin;&#10;&#10;    public ExamineListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        String title = event.getView().getTitle();&#10;        if (!title.contains(&quot;Examining&quot;)) {&#10;            return;&#10;        }&#10;&#10;        event.setCancelled(true);&#10;&#10;        if (event.getCurrentItem() == null || event.getCurrentItem().getType() == Material.AIR) {&#10;            return;&#10;        }&#10;&#10;        if (event.getCurrentItem().getType() == Material.REDSTONE) {&#10;            Player staff = (Player) event.getWhoClicked();&#10;            String targetName = title.substring(title.lastIndexOf(&quot; &quot;) + 1);&#10;&#10;            // Close the examine GUI&#10;            staff.closeInventory();&#10;&#10;            // Execute the history command&#10;            Bukkit.dispatchCommand(staff, &quot;history &quot; + targetName);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/FreezeCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/FreezeCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class FreezeCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public FreezeCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.freeze&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze-usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Verhindere, dass Spieler sich selbst freezen können&#10;        if (sender instanceof Player &amp;&amp; target.getName().equals(((Player) sender).getName())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (plugin.getFrozenPlayers().contains(target.getUniqueId())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze.already-frozen&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Überprüfe ob der Zielspieler OP oder die bypass Permission hat&#10;        if (target.isOp() || target.hasPermission(&quot;banplugin.freeze.bypass&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        plugin.getFrozenPlayers().add(target.getUniqueId());&#10;        String message = plugin.getConfig().getString(&quot;messages.freeze.frozen-by&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName());&#10;        sender.sendMessage(plugin.colorize(message));&#10;&#10;        String mainTitle = plugin.getConfig().getString(&quot;messages.freeze.title.main&quot;);&#10;        String subtitle = plugin.getConfig().getString(&quot;messages.freeze.title.subtitle&quot;);&#10;&#10;        target.sendTitle(&#10;                plugin.colorize(mainTitle),&#10;                plugin.colorize(subtitle),&#10;                10,&#10;                Integer.MAX_VALUE,&#10;                20&#10;        );&#10;&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class FreezeCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public FreezeCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.freeze&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze-usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent players from freezing themselves&#10;        if (sender instanceof Player &amp;&amp; target.getName().equals(((Player) sender).getName())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (plugin.getFrozenPlayers().contains(target.getUniqueId())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze.already-frozen&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check if the target player is OP or has the bypass permission&#10;        if (target.isOp() || target.hasPermission(&quot;banplugin.freeze.bypass&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        plugin.getFrozenPlayers().add(target.getUniqueId());&#10;        String message = plugin.getConfig().getString(&quot;messages.freeze.frozen-by&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName());&#10;        sender.sendMessage(plugin.colorize(message));&#10;&#10;        String mainTitle = plugin.getConfig().getString(&quot;messages.freeze.title.main&quot;);&#10;        String subtitle = plugin.getConfig().getString(&quot;messages.freeze.title.subtitle&quot;);&#10;&#10;        target.sendTitle(&#10;                plugin.colorize(mainTitle),&#10;                plugin.colorize(subtitle),&#10;                10,&#10;                Integer.MAX_VALUE,&#10;                20&#10;        );&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/InvseeCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/InvseeCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class InvseeCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public InvseeCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(plugin.colorize(&quot;&amp;cThis command can only be used by players!&quot;));&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.invsee&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length != 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.invsee.usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player staff = (Player) sender;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent players from viewing their own inventory&#10;        if (target.equals(staff)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent viewing inventory of staff members&#10;        if (target.hasPermission(&quot;banplugin.invsee.bypass&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        staff.openInventory(target.getInventory());&#10;        staff.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.invsee.opened&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())));&#10;&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;import org.bukkit.event.inventory.InventoryDragEvent;&#10;import org.bukkit.inventory.Inventory;&#10;&#10;public class InvseeCommand implements CommandExecutor, Listener {&#10;    private final BanPlugin plugin;&#10;&#10;    public InvseeCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;        // Register this class as event listener&#10;        plugin.getServer().getPluginManager().registerEvents(this, plugin);&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(plugin.colorize(&quot;&amp;cThis command can only be used by players!&quot;));&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.invsee&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length != 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.invsee.usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player staff = (Player) sender;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent players from viewing their own inventory&#10;        if (target.equals(staff)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent viewing inventory of staff members&#10;        if (target.hasPermission(&quot;banplugin.invsee.bypass&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Open inventory and send message&#10;        Inventory inv = target.getInventory();&#10;        staff.openInventory(inv);&#10;&#10;        if (!staff.hasPermission(&quot;banplugin.invsee.modify&quot;)) {&#10;            staff.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.invsee.view-only&quot;)));&#10;        }&#10;&#10;        staff.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.invsee.opened&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())));&#10;&#10;        return true;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#10;&#10;        // Check if this is an invsee inventory&#10;        if (event.getInventory().equals(event.getWhoClicked().getOpenInventory().getTopInventory()) &amp;&amp;&#10;                event.getInventory().getHolder() instanceof Player &amp;&amp;&#10;                !event.getWhoClicked().equals(event.getInventory().getHolder())) {&#10;&#10;            // Cancel if player doesn't have modify permission&#10;            if (!event.getWhoClicked().hasPermission(&quot;banplugin.invsee.modify&quot;)) {&#10;                event.setCancelled(true);&#10;            }&#10;        }&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryDrag(InventoryDragEvent event) {&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#10;&#10;        // Check if this is an invsee inventory&#10;        if (event.getInventory().equals(event.getWhoClicked().getOpenInventory().getTopInventory()) &amp;&amp;&#10;                event.getInventory().getHolder() instanceof Player &amp;&amp;&#10;                !event.getWhoClicked().equals(event.getInventory().getHolder())) {&#10;&#10;            // Cancel if player doesn't have modify permission&#10;            if (!event.getWhoClicked().hasPermission(&quot;banplugin.invsee.modify&quot;)) {&#10;                event.setCancelled(true);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/KickCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/KickCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class KickCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public KickCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.kick&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.usage-kick&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Verhindere, dass Spieler sich selbst kicken können&#10;        if (sender instanceof Player &amp;&amp; target.getName().equals(((Player) sender).getName())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Staff-Bypass Check&#10;        if (target.hasPermission(&quot;banplugin.bypass&quot;) || target.isOp()) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Combine remaining arguments for kick reason&#10;        StringBuilder reason = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            reason.append(args[i]);&#10;            if (i &lt; args.length - 1) reason.append(&quot; &quot;);&#10;        }&#10;&#10;        // Kick the player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-kicked&quot;)&#10;                .replace(&quot;{reason}&quot;, reason.toString());&#10;        target.kickPlayer(plugin.colorize(kickMessage));&#10;&#10;        // Send confirmation message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.kick-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason.toString());&#10;        sender.sendMessage(plugin.colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class KickCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public KickCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.kick&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.usage-kick&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Prevent players from kicking themselves&#10;        if (sender instanceof Player &amp;&amp; target.getName().equals(((Player) sender).getName())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Staff-Bypass Check&#10;        if (target.hasPermission(&quot;banplugin.bypass&quot;) || target.isOp()) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Combine remaining arguments for kick reason&#10;        StringBuilder reason = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            reason.append(args[i]);&#10;            if (i &lt; args.length - 1) reason.append(&quot; &quot;);&#10;        }&#10;&#10;        // Kick the player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-kicked&quot;)&#10;                .replace(&quot;{reason}&quot;, reason.toString());&#10;        target.kickPlayer(plugin.colorize(kickMessage));&#10;&#10;        // Send confirmation message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.kick-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason.toString());&#10;        sender.sendMessage(plugin.colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;&#10;        // Verhindere, dass Spieler sich selbst muten können&#10;        if (sender instanceof Player &amp;&amp; playerName.equalsIgnoreCase(((Player) sender).getName())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;) || onlineTarget.isOp()) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long durationMs = parseDuration(duration);&#10;        long expiryTime = System.currentTimeMillis() + durationMs;&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;MUTE&quot;,&#10;            sender.getName(),&#10;            reason,&#10;            durationMs&#10;        );&#10;&#10;        // Save mute in config&#10;        String mutePath = &quot;muted-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(mutePath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(mutePath + &quot;.by&quot;, sender.getName());&#10;        plugin.getBansConfig().set(mutePath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(mutePath + &quot;.expires&quot;, expiryTime);&#10;        plugin.saveBansConfig();&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + target.getUniqueId().toString() + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Sekunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minuten zu Millisekunden&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Stunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Tage zu Millisekunden&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;&#10;        // Prevent players from muting themselves&#10;        if (sender instanceof Player &amp;&amp; playerName.equalsIgnoreCase(((Player) sender).getName())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.cannot-target-self&quot;)));&#10;            return true;&#10;        }&#10;&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;) || onlineTarget.isOp()) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.staff-bypass&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long durationMs = parseDuration(duration);&#10;        long expiryTime = System.currentTimeMillis() + durationMs;&#10;&#10;        // Add to history&#10;        plugin.addToHistory(&#10;            target.getUniqueId().toString(),&#10;            &quot;MUTE&quot;,&#10;            sender.getName(),&#10;            reason,&#10;            durationMs&#10;        );&#10;&#10;        // Save mute in config&#10;        String mutePath = &quot;muted-players.&quot; + target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(mutePath + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(mutePath + &quot;.by&quot;, sender.getName());&#10;        plugin.getBansConfig().set(mutePath + &quot;.time&quot;, System.currentTimeMillis());&#10;        plugin.getBansConfig().set(mutePath + &quot;.expires&quot;, expiryTime);&#10;        plugin.saveBansConfig();&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + target.getUniqueId().toString() + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Seconds to milliseconds&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minutes to milliseconds&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Hours to milliseconds&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Days to milliseconds&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerFreezeListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerFreezeListener.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerMoveEvent;&#10;import org.bukkit.event.player.PlayerQuitEvent;&#10;&#10;public class PlayerFreezeListener implements Listener {&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerFreezeListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerMove(PlayerMoveEvent event) {&#10;        Player player = event.getPlayer();&#10;        if (plugin.getFrozenPlayers().contains(player.getUniqueId())) {&#10;            // Only cancel if the player actually moved position (not just looked around)&#10;            if (event.getTo().getX() != event.getFrom().getX() ||&#10;                event.getTo().getY() != event.getFrom().getY() ||&#10;                event.getTo().getZ() != event.getFrom().getZ()) {&#10;                event.setCancelled(true);&#10;                &#10;                player.sendTitle(&#10;                    plugin.colorize(&quot;&amp;cYou have been frozen!&quot;),&#10;                    plugin.colorize(&quot;&amp;7Contact a staff member in the discord&quot;),&#10;                    10,&#10;                    60,&#10;                    20&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerQuit(PlayerQuitEvent event) {&#10;        // Optional: Remove player from frozen set when they leave&#10;        // Uncomment if you want frozen status to reset on logout&#10;        // plugin.getFrozenPlayers().remove(event.getPlayer().getUniqueId());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerMoveEvent;&#10;import org.bukkit.event.player.PlayerQuitEvent;&#10;&#10;public class PlayerFreezeListener implements Listener {&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerFreezeListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerMove(PlayerMoveEvent event) {&#10;        Player player = event.getPlayer();&#10;        if (plugin.getFrozenPlayers().contains(player.getUniqueId())) {&#10;            // Only cancel if the player actually moved position (not just looked around)&#10;            if (event.getTo().getX() != event.getFrom().getX() ||&#10;                event.getTo().getY() != event.getFrom().getY() ||&#10;                event.getTo().getZ() != event.getFrom().getZ()) {&#10;                event.setCancelled(true);&#10;                &#10;                String mainTitle = plugin.getConfig().getString(&quot;messages.freeze.title.main&quot;);&#10;                String subtitle = plugin.getConfig().getString(&quot;messages.freeze.title.subtitle&quot;);&#10;                &#10;                player.sendTitle(&#10;                    plugin.colorize(mainTitle),&#10;                    plugin.colorize(subtitle),&#10;                    10,&#10;                    60,&#10;                    20&#10;                );&#10;            }&#10;        }&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerQuit(PlayerQuitEvent event) {&#10;        // Optional: Remove player from frozen set when they leave&#10;        // Uncomment if you want frozen status to reset on logout&#10;        // plugin.getFrozenPlayers().remove(event.getPlayer().getUniqueId());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerJoinListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/PlayerJoinListener.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerJoinEvent;&#10;import java.util.Date;&#10;&#10;public class PlayerJoinListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerJoinListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerJoin(PlayerJoinEvent event) {&#10;        String uuid = event.getPlayer().getUniqueId().toString();&#10;&#10;        // Check if player is banned&#10;        if (!plugin.getBansConfig().contains(&quot;banned-players.&quot; + uuid)) {&#10;            return; // Player is not banned&#10;        }&#10;&#10;        // Get ban details&#10;        long expiryTime = plugin.getBansConfig().getLong(&quot;banned-players.&quot; + uuid + &quot;.expires&quot;);&#10;        String reason = plugin.getBansConfig().getString(&quot;banned-players.&quot; + uuid + &quot;.reason&quot;);&#10;&#10;        // Check if ban has expired&#10;        if (System.currentTimeMillis() &gt;= expiryTime) {&#10;            // Ban has expired, remove it&#10;            plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid, null);&#10;            plugin.saveBansConfig();&#10;            return; // Let player join&#10;        }&#10;&#10;        // Ban is still active, kick the player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;&#10;        event.getPlayer().kickPlayer(colorize(kickMessage));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerJoinEvent;&#10;&#10;import java.util.Date;&#10;&#10;public class PlayerJoinListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public PlayerJoinListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerJoin(PlayerJoinEvent event) {&#10;        Player player = event.getPlayer();&#10;&#10;        // Check if player is banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + player.getUniqueId().toString())) {&#10;            String uuid = event.getPlayer().getUniqueId().toString();&#10;            String banPath = &quot;banned-players.&quot; + uuid;&#10;&#10;            // Get ban details&#10;            long banTime = plugin.getBansConfig().getLong(banPath + &quot;.time&quot;);&#10;            long duration = plugin.getBansConfig().getLong(banPath + &quot;.duration&quot;);&#10;            String reason = plugin.getBansConfig().getString(banPath + &quot;.reason&quot;);&#10;&#10;            // Calculate expiry time (-1 duration means permanent ban)&#10;            if (duration == -1) {&#10;                // Permanent ban&#10;                kickBannedPlayer(event, reason, -1);&#10;                return;&#10;            }&#10;&#10;            long expiryTime = banTime + duration;&#10;&#10;            // Check if ban has expired&#10;            if (System.currentTimeMillis() &gt;= expiryTime) {&#10;                // Ban has expired, remove it&#10;                plugin.getBansConfig().set(banPath, null);&#10;                plugin.saveBansConfig();&#10;                return; // Let player join&#10;            }&#10;&#10;            // Ban is still active, kick the player&#10;            kickBannedPlayer(event, reason, expiryTime);&#10;        }&#10;&#10;        // Hide vanished players from the joining player&#10;        if (!player.hasPermission(&quot;banplugin.vanish.see&quot;)) {&#10;            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {&#10;                if (plugin.getVanishedPlayers().contains(onlinePlayer.getUniqueId())) {&#10;                    player.hidePlayer(plugin, onlinePlayer);&#10;                }&#10;            }&#10;        }&#10;&#10;        // If the joining player is vanished, hide them from others&#10;        if (plugin.getVanishedPlayers().contains(player.getUniqueId())) {&#10;            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {&#10;                if (!onlinePlayer.hasPermission(&quot;banplugin.vanish.see&quot;)) {&#10;                    onlinePlayer.hidePlayer(plugin, player);&#10;                }&#10;            }&#10;            player.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.vanish.enabled&quot;)));&#10;        }&#10;    }&#10;&#10;    private void kickBannedPlayer(PlayerJoinEvent event, String reason, long expiryTime) {&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, expiryTime == -1 ? &quot;Never&quot; : new Date(expiryTime).toString());&#10;&#10;        event.getPlayer().kickPlayer(colorize(kickMessage));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/UnfreezeCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/UnfreezeCommand.java" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class UnfreezeCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public UnfreezeCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!sender.hasPermission(&quot;banplugin.unfreeze&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.unfreeze-usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = Bukkit.getPlayer(args[0]);&#10;        if (target == null) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (!plugin.getFrozenPlayers().contains(target.getUniqueId())) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze.not-frozen&quot;)));&#10;            return true;&#10;        }&#10;&#10;        plugin.getFrozenPlayers().remove(target.getUniqueId());&#10;        String message = plugin.getConfig().getString(&quot;messages.freeze.unfrozen-by&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName());&#10;        sender.sendMessage(plugin.colorize(message));&#10;&#10;        // Clear the freeze title&#10;        target.resetTitle();&#10;        target.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.freeze.unfrozen&quot;)));&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/VanishCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/VanishCommand.java" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.util.List;&#10;&#10;public class VanishCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public VanishCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(plugin.colorize(&quot;&amp;cThis command can only be used by players!&quot;));&#10;            return true;&#10;        }&#10;&#10;        if (!sender.hasPermission(&quot;banplugin.vanish&quot;)) {&#10;            sender.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;        &#10;        if (plugin.getVanishedPlayers().contains(player.getUniqueId())) {&#10;            // Unvanish the player&#10;            plugin.getVanishedPlayers().remove(player.getUniqueId());&#10;            &#10;            // Show player to everyone&#10;            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {&#10;                onlinePlayer.showPlayer(plugin, player);&#10;            }&#10;            &#10;            player.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.vanish.disabled&quot;)));&#10;        } else {&#10;            // Vanish the player&#10;            plugin.getVanishedPlayers().add(player.getUniqueId());&#10;            &#10;            // Hide player from everyone except those with see permission&#10;            for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {&#10;                if (!onlinePlayer.hasPermission(&quot;banplugin.vanish.see&quot;)) {&#10;                    onlinePlayer.hidePlayer(plugin, player);&#10;                }&#10;            }&#10;            &#10;            player.sendMessage(plugin.colorize(plugin.getConfig().getString(&quot;messages.vanish.enabled&quot;)));&#10;        }&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/config.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/config.yml" />
              <option name="originalContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;settings:&#10;  use-id-system:&#10;    ban: true    # true = use IDs (1,2,3), false = use reasons directly&#10;    mute: true   # true = use IDs (1,2,3), false = use reasons directly&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;  history:&#10;    title: &quot;&amp;8History of {player}&quot;&#10;    no-entries: &quot;&amp;cNo history entries found&quot;&#10;    entry:&#10;      ban: &quot;&amp;eBan&quot;&#10;      mute: &quot;&amp;eMute&quot;&#10;      by: &quot;&amp;7By: &amp;f{staff}&quot;&#10;      reason: &quot;&amp;7Reason: &amp;f{reason}&quot;&#10;      date: &quot;&amp;7Date: &amp;f{date}&quot;&#10;      duration:&#10;        permanent: &quot;&amp;7Duration: &amp;fPermanent&quot;&#10;        temporary: &quot;&amp;7Duration: &amp;f{duration}&quot;&#10;  invalid-player: &quot;&amp;cPlease enter a valid player name&quot;&#10;  history-usage: &quot;&amp;cUsage: /history &lt;player&gt;&quot;&#10;  reload-success: &quot;&amp;aConfiguration successfully reloaded!&quot;&#10;  freeze:&#10;    title:&#10;      main: &quot;&amp;cYou have been frozen!&quot;&#10;      subtitle: &quot;&amp;7Contact a staff member in the discord&quot;&#10;    frozen-by: &quot;&amp;aYou have frozen {player}&quot;&#10;    already-frozen: &quot;&amp;cThis player is already frozen&quot;&#10;    not-frozen: &quot;&amp;cThis player is not frozen&quot;&#10;    unfrozen: &quot;&amp;aYou have been unfrozen&quot;&#10;    unfrozen-by: &quot;&amp;aYou have unfrozen {player}&quot;&#10;  freeze-usage: &quot;&amp;cUsage: /freeze &lt;player&gt;&quot;&#10;  unfreeze-usage: &quot;&amp;cUsage: /unfreeze &lt;player&gt;&quot;&#10;  cannot-target-self: &quot;&amp;cYou cannot target yourself!&quot;&#10;  staff-bypass: &quot;&amp;cYou cannot target this player - they have bypass permission!&quot;&#10;  examine:&#10;    title: &quot;&amp;8Examining {player}&quot;&#10;    usage: &quot;&amp;cUsage: /examine &lt;player&gt;&quot;&#10;    offline: &quot;&amp;cPlayer must be online to be examined&quot;&#10;    info:&#10;      name: &quot;&amp;7Name: &amp;f{name}&quot;&#10;      uuid: &quot;&amp;7UUID: &amp;f{uuid}&quot;&#10;      ip: &quot;&amp;7IP: &amp;f{ip}&quot;&#10;      location: &quot;&amp;7Location: &amp;f{world}, {x}, {y}, {z}&quot;&#10;      gamemode: &quot;&amp;7Gamemode: &amp;f{gamemode}&quot;&#10;      health: &quot;&amp;7Health: &amp;f{health}/20&quot;&#10;      food: &quot;&amp;7Food: &amp;f{food}/20&quot;&#10;      exp: &quot;&amp;7Experience: &amp;f{exp}&quot;&#10;      op: &quot;&amp;7Operator: &amp;f{op}&quot;&#10;  vanish:&#10;    enabled: &quot;&amp;aVanish mode enabled&quot;&#10;    disabled: &quot;&amp;cVanish mode disabled&quot;&#10;  invsee:&#10;    usage: &quot;&amp;cUsage: /invsee &lt;player&gt;&quot;&#10;    opened: &quot;&amp;aViewing inventory of &amp;e{player}&quot;&#10;    view-only: &quot;&amp;cYou are in view-only mode. You cannot modify this inventory.&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;&#10;" />
              <option name="updatedContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;settings:&#10;  use-id-system:&#10;    ban: true    # true = use IDs (1,2,3), false = use reasons directly&#10;    mute: true   # true = use IDs (1,2,3), false = use reasons directly&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;  history:&#10;    title: &quot;&amp;8History of {player}&quot;&#10;    no-entries: &quot;&amp;cNo history entries found&quot;&#10;    entry:&#10;      ban: &quot;&amp;eBan&quot;&#10;      mute: &quot;&amp;eMute&quot;&#10;      by: &quot;&amp;7By: &amp;f{staff}&quot;&#10;      reason: &quot;&amp;7Reason: &amp;f{reason}&quot;&#10;      date: &quot;&amp;7Date: &amp;f{date}&quot;&#10;      duration:&#10;        permanent: &quot;&amp;7Duration: &amp;fPermanent&quot;&#10;        temporary: &quot;&amp;7Duration: &amp;f{duration}&quot;&#10;  invalid-player: &quot;&amp;cPlease enter a valid player name&quot;&#10;  history-usage: &quot;&amp;cUsage: /history &lt;player&gt;&quot;&#10;  reload-success: &quot;&amp;aConfiguration successfully reloaded!&quot;&#10;  freeze:&#10;    title:&#10;      main: &quot;&amp;cYou have been frozen!&quot;&#10;      subtitle: &quot;&amp;7Contact a staff member in the discord&quot;&#10;    frozen-by: &quot;&amp;aYou have frozen {player}&quot;&#10;    already-frozen: &quot;&amp;cThis player is already frozen&quot;&#10;    not-frozen: &quot;&amp;cThis player is not frozen&quot;&#10;    unfrozen: &quot;&amp;aYou have been unfrozen&quot;&#10;    unfrozen-by: &quot;&amp;aYou have unfrozen {player}&quot;&#10;  freeze-usage: &quot;&amp;cUsage: /freeze &lt;player&gt;&quot;&#10;  unfreeze-usage: &quot;&amp;cUsage: /unfreeze &lt;player&gt;&quot;&#10;  cannot-target-self: &quot;&amp;cYou cannot target yourself!&quot;&#10;  staff-bypass: &quot;&amp;cYou cannot target this player - they have bypass permission!&quot;&#10;  examine:&#10;    title: &quot;&amp;8Examining {player}&quot;&#10;    usage: &quot;&amp;cUsage: /examine &lt;player&gt;&quot;&#10;    offline: &quot;&amp;cPlayer must be online to be examined&quot;&#10;    info:&#10;      name: &quot;&amp;7Name: &amp;f{name}&quot;&#10;      uuid: &quot;&amp;7UUID: &amp;f{uuid}&quot;&#10;      ip: &quot;&amp;7IP: &amp;f{ip}&quot;&#10;      location: &quot;&amp;7Location: &amp;f{world}, {x}, {y}, {z}&quot;&#10;      gamemode: &quot;&amp;7Gamemode: &amp;f{gamemode}&quot;&#10;      health: &quot;&amp;7Health: &amp;f{health}/20&quot;&#10;      food: &quot;&amp;7Food: &amp;f{food}/20&quot;&#10;      exp: &quot;&amp;7Experience: &amp;f{exp}&quot;&#10;      op: &quot;&amp;7Operator: &amp;f{op}&quot;&#10;  vanish:&#10;    enabled: &quot;&amp;aVanish mode enabled&quot;&#10;    disabled: &quot;&amp;cVanish mode disabled&quot;&#10;  invsee:&#10;    usage: &quot;&amp;cUsage: /invsee &lt;player&gt;&quot;&#10;    opened: &quot;&amp;aViewing inventory of &amp;e{player}&quot;&#10;    view-only: &quot;&amp;cYou are in view-only mode. You cannot modify this inventory.&quot;&#10;  clearinv:&#10;    usage: &quot;&amp;cUsage: /clearinv [player]&quot;&#10;    cleared-self: &quot;&amp;aYour inventory has been cleared&quot;&#10;    cleared-other: &quot;&amp;aCleared inventory of &amp;e{player}&quot;&#10;    cleared-by: &quot;&amp;cYour inventory has been cleared by &amp;e{staff}&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/plugin.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/plugin.yml" />
              <option name="originalContent" value="name: Smartbans&#10;version: 'BETA 1.4'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;  mute:&#10;    description: Mute a player with configurable reasons&#10;    usage: /mute &lt;player&gt; &lt;id&gt;&#10;  unmute:&#10;    description: Unmute a player&#10;    usage: /unmute &lt;player&gt;&#10;  history:&#10;    description: View a player's ban and mute history&#10;    usage: /history &lt;player&gt;&#10;  smartbans:&#10;    description: Reload the plugin configuration&#10;    usage: /smartbans reload&#10;  freeze:&#10;    description: Freeze a player&#10;    usage: /freeze &lt;player&gt;&#10;  unfreeze:&#10;    description: Unfreeze a player&#10;    usage: /unfreeze &lt;player&gt;&#10;  examine:&#10;    description: Examine detailed information about a player&#10;    usage: /examine &lt;player&gt;&#10;  vanish:&#10;    description: Toggle vanish mode&#10;    usage: /vanish&#10;    aliases: [v]&#10;  invsee:&#10;    description: View another player's inventory&#10;    usage: /invsee &lt;player&gt;&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: op&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: op&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: op&#10;  banplugin.mute:&#10;    description: Allows muting players&#10;    default: op&#10;  banplugin.unmute:&#10;    description: Allows unmuting players&#10;    default: op&#10;  banplugin.bypass:&#10;    description: Prevents being banned, kicked or muted by other staff members&#10;    default: op&#10;  banplugin.history:&#10;    description: Allows viewing ban and mute history of players&#10;    default: op&#10;  banplugin.reload:&#10;    description: Allows reloading the plugin configuration&#10;    default: op&#10;  banplugin.admin:&#10;    description: Grants all administrative permissions&#10;    default: op&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;      banplugin.mute: true&#10;      banplugin.unmute: true&#10;      banplugin.history: true&#10;      banplugin.reload: true&#10;      banplugin.invsee: true&#10;      banplugin.invsee.modify: true&#10;  banplugin.freeze:&#10;    description: Allows freezing players&#10;    default: op&#10;  banplugin.unfreeze:&#10;    description: Allows unfreezing players&#10;    default: op&#10;  banplugin.freeze.bypass:&#10;    description: Prevents being frozen&#10;    default: op&#10;  banplugin.examine:&#10;    description: Allows examining detailed player information&#10;    default: op&#10;  banplugin.vanish:&#10;    description: Allows using vanish mode&#10;    default: op&#10;  banplugin.vanish.see:&#10;    description: Allows seeing vanished staff members&#10;    default: op&#10;  banplugin.invsee:&#10;    description: Allows viewing other players' inventories&#10;    default: op&#10;  banplugin.invsee.bypass:&#10;    description: Prevents inventory from being viewed&#10;    default: op&#10;  banplugin.invsee.modify:&#10;    description: Allows modifying inventories while using invsee&#10;    default: op&#10;  banplugin.*:&#10;    description: Grants all plugin permissions including bypass&#10;    default: op&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true&#10;" />
              <option name="updatedContent" value="name: Smartbans&#10;version: 'BETA 1.4'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;  mute:&#10;    description: Mute a player with configurable reasons&#10;    usage: /mute &lt;player&gt; &lt;id&gt;&#10;  unmute:&#10;    description: Unmute a player&#10;    usage: /unmute &lt;player&gt;&#10;  history:&#10;    description: View a player's ban and mute history&#10;    usage: /history &lt;player&gt;&#10;  smartbans:&#10;    description: Reload the plugin configuration&#10;    usage: /smartbans reload&#10;  freeze:&#10;    description: Freeze a player&#10;    usage: /freeze &lt;player&gt;&#10;  unfreeze:&#10;    description: Unfreeze a player&#10;    usage: /unfreeze &lt;player&gt;&#10;  examine:&#10;    description: Examine detailed information about a player&#10;    usage: /examine &lt;player&gt;&#10;  vanish:&#10;    description: Toggle vanish mode&#10;    usage: /vanish&#10;    aliases: [v]&#10;  invsee:&#10;    description: View another player's inventory&#10;    usage: /invsee &lt;player&gt;&#10;  clearinv:&#10;    description: Clear a player's inventory&#10;    usage: /clearinv [player]&#10;    aliases: [ci]&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: op&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: op&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: op&#10;  banplugin.mute:&#10;    description: Allows muting players&#10;    default: op&#10;  banplugin.unmute:&#10;    description: Allows unmuting players&#10;    default: op&#10;  banplugin.bypass:&#10;    description: Prevents being banned, kicked or muted by other staff members&#10;    default: op&#10;  banplugin.history:&#10;    description: Allows viewing ban and mute history of players&#10;    default: op&#10;  banplugin.reload:&#10;    description: Allows reloading the plugin configuration&#10;    default: op&#10;  banplugin.admin:&#10;    description: Grants all administrative permissions&#10;    default: op&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;      banplugin.mute: true&#10;      banplugin.unmute: true&#10;      banplugin.history: true&#10;      banplugin.reload: true&#10;      banplugin.invsee: true&#10;      banplugin.invsee.modify: true&#10;  banplugin.freeze:&#10;    description: Allows freezing players&#10;    default: op&#10;  banplugin.unfreeze:&#10;    description: Allows unfreezing players&#10;    default: op&#10;  banplugin.freeze.bypass:&#10;    description: Prevents being frozen&#10;    default: op&#10;  banplugin.examine:&#10;    description: Allows examining detailed player information&#10;    default: op&#10;  banplugin.vanish:&#10;    description: Allows using vanish mode&#10;    default: op&#10;  banplugin.vanish.see:&#10;    description: Allows seeing vanished staff members&#10;    default: op&#10;  banplugin.invsee:&#10;    description: Allows viewing other players' inventories&#10;    default: op&#10;  banplugin.invsee.bypass:&#10;    description: Prevents inventory from being viewed&#10;    default: op&#10;  banplugin.invsee.modify:&#10;    description: Allows modifying inventories while using invsee&#10;    default: op&#10;  banplugin.clearinv:&#10;    description: Allows clearing inventories&#10;    default: op&#10;  banplugin.clearinv.bypass:&#10;    description: Prevents inventory from being cleared&#10;    default: op&#10;  banplugin.*:&#10;    description: Grants all plugin permissions including bypass&#10;    default: op&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>