<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        String input = args[1];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-ban-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details from config&#10;        String reason = plugin.getConfig().getString(&quot;bans.&quot; + banId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;bans.&quot; + banId + &quot;.duration&quot;);&#10;&#10;        // Calculate expiry time&#10;        long expiryTime = System.currentTimeMillis() + parseDuration(duration);&#10;&#10;        // Store ban in bans.yml&#10;        String uuid = target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.expires&quot;, expiryTime);&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.banned-by&quot;, sender.getName());&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.banned-at&quot;, System.currentTimeMillis());&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;&#10;        String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;        String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;        try {&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    return 24 * 60 * 60 * 1000; // Default 1 day&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;import java.util.Date;&#10;import java.util.Set;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;&#10;public class BanCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.ban&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showBanUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-ban&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;        &#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;        &#10;        // Find the ban entry either by ID or reason&#10;        String banId = null;&#10;        ConfigurationSection bans = plugin.getConfig().getConfigurationSection(&quot;bans&quot;);&#10;        &#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!bans.contains(input)) {&#10;                Set&lt;String&gt; availableIds = bans.getKeys(false);&#10;                String idsString = String.join(&quot;, &quot;, availableIds);&#10;                String message = plugin.getConfig().getString(&quot;messages.invalid-ban-id&quot;)&#10;                        .replace(&quot;{ids}&quot;, idsString);&#10;                sender.sendMessage(colorize(message));&#10;                return true;&#10;            }&#10;            banId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : bans.getKeys(false)) {&#10;                String reason = bans.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    banId = id;&#10;                    break;&#10;                }&#10;            }&#10;            &#10;            if (banId == null) {&#10;                sender.sendMessage(colorize(&quot;&amp;cInvalid ban reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Get player (online or offline) - allows pre-emptive bans&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Check if target has bypass permission (prevent banning staff)&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-ban-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check if player is already banned&#10;        if (plugin.getBansConfig().contains(&quot;banned-players.&quot; + target.getUniqueId().toString())) {&#10;            String message = plugin.getConfig().getString(&quot;messages.already-banned&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName());&#10;            sender.sendMessage(colorize(message));&#10;            return true;&#10;        }&#10;&#10;        // Get ban details from config&#10;        String reason = plugin.getConfig().getString(&quot;bans.&quot; + banId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;bans.&quot; + banId + &quot;.duration&quot;);&#10;&#10;        // Calculate expiry time&#10;        long expiryTime = System.currentTimeMillis() + parseDuration(duration);&#10;&#10;        // Store ban in bans.yml&#10;        String uuid = target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.expires&quot;, expiryTime);&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.banned-by&quot;, sender.getName());&#10;        plugin.getBansConfig().set(&quot;banned-players.&quot; + uuid + &quot;.banned-at&quot;, System.currentTimeMillis());&#10;        plugin.saveBansConfig();&#10;&#10;        // Kick player if online&#10;        if (target.isOnline()) {&#10;            Player onlineTarget = (Player) target;&#10;            String kickMessage = plugin.getConfig().getString(&quot;messages.player-banned&quot;)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{expires}&quot;, new Date(expiryTime).toString());&#10;            onlineTarget.kickPlayer(colorize(kickMessage));&#10;        }&#10;&#10;        // Send success message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.ban-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showBanUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.ban&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.header&quot;, &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.list-header&quot;, &quot;&amp;cAvailable Ban IDs:&quot;) :&#10;            &quot;&amp;cAvailable Ban Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.ban-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;&#10;        if (plugin.getConfig().getConfigurationSection(&quot;bans&quot;) != null) {&#10;            for (String id : plugin.getConfig().getConfigurationSection(&quot;bans&quot;).getKeys(false)) {&#10;                String reason = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.reason&quot;);&#10;                String duration = plugin.getConfig().getString(&quot;bans.&quot; + id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(colorize(line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null || duration.isEmpty()) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;&#10;        String timeUnit = duration.substring(duration.length() - 1).toLowerCase();&#10;        String timeValue = duration.substring(0, duration.length() - 1);&#10;&#10;        try {&#10;            long value = Long.parseLong(timeValue);&#10;            switch (timeUnit) {&#10;                case &quot;s&quot;:&#10;                    return value * 1000;&#10;                case &quot;m&quot;:&#10;                    return value * 60 * 1000;&#10;                case &quot;h&quot;:&#10;                    return value * 60 * 60 * 1000;&#10;                case &quot;d&quot;:&#10;                    return value * 24 * 60 * 60 * 1000;&#10;                default:&#10;                    return 24 * 60 * 60 * 1000; // Default 1 day&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            return 24 * 60 * 60 * 1000; // Default 1 day&#10;        }&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanPlugin.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml file for storing active bans&#10;        createBansFile();&#10;&#10;        // Register commands&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.plugin.java.JavaPlugin;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import java.io.File;&#10;import java.io.IOException;&#10;&#10;public class BanPlugin extends JavaPlugin {&#10;&#10;    private File bansFile;&#10;    private FileConfiguration bansConfig;&#10;&#10;    @Override&#10;    public void onEnable() {&#10;        // Save default config if it doesn't exist&#10;        saveDefaultConfig();&#10;&#10;        // Create bans.yml file for storing active bans&#10;        createBansFile();&#10;&#10;        // Create TabCompleter instance&#10;        BanTabCompleter tabCompleter = new BanTabCompleter(this);&#10;&#10;        // Register commands and tab completers&#10;        getCommand(&quot;ban&quot;).setExecutor(new BanCommand(this));&#10;        getCommand(&quot;unban&quot;).setExecutor(new UnbanCommand(this));&#10;        getCommand(&quot;kick&quot;).setExecutor(new KickCommand(this));&#10;        getCommand(&quot;mute&quot;).setExecutor(new MuteCommand(this));&#10;        getCommand(&quot;unmute&quot;).setExecutor(new UnmuteCommand(this));&#10;&#10;        // Register tab completers&#10;        getCommand(&quot;ban&quot;).setTabCompleter(tabCompleter);&#10;        getCommand(&quot;mute&quot;).setTabCompleter(tabCompleter);&#10;&#10;        // Register event listeners&#10;        getServer().getPluginManager().registerEvents(new PlayerJoinListener(this), this);&#10;        getServer().getPluginManager().registerEvents(new ChatListener(this), this);&#10;&#10;        getLogger().info(&quot;Ban Plugin has been enabled!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onDisable() {&#10;        getLogger().info(&quot;Ban Plugin has been disabled!&quot;);&#10;    }&#10;&#10;    private void createBansFile() {&#10;        bansFile = new File(getDataFolder(), &quot;bans.yml&quot;);&#10;        if (!bansFile.exists()) {&#10;            bansFile.getParentFile().mkdirs();&#10;            try {&#10;                bansFile.createNewFile();&#10;            } catch (IOException e) {&#10;                getLogger().severe(&quot;Could not create bans.yml file!&quot;);&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;&#10;    public FileConfiguration getBansConfig() {&#10;        return bansConfig;&#10;    }&#10;&#10;    public void saveBansConfig() {&#10;        try {&#10;            bansConfig.save(bansFile);&#10;        } catch (IOException e) {&#10;            getLogger().severe(&quot;Could not save bans.yml!&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void reloadBansConfig() {&#10;        bansConfig = YamlConfiguration.loadConfiguration(bansFile);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanTabCompleter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/BanTabCompleter.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.TabCompleter;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class BanTabCompleter implements TabCompleter {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanTabCompleter(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; onTabComplete(CommandSender sender, Command command, String label, String[] args) {&#10;        List&lt;String&gt; completions = new ArrayList&lt;&gt;();&#10;&#10;        if (args.length == 1) {&#10;            // First argument is always player name&#10;            for (Player player : Bukkit.getOnlinePlayers()) {&#10;                if (player.getName().toLowerCase().startsWith(args[0].toLowerCase())) {&#10;                    completions.add(player.getName());&#10;                }&#10;            }&#10;        } else if (args.length == 2) {&#10;            boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.&quot; + command.getName(), true);&#10;            String section = command.getName().equals(&quot;ban&quot;) ? &quot;bans&quot; : &quot;mutes&quot;;&#10;            ConfigurationSection reasons = plugin.getConfig().getConfigurationSection(section);&#10;&#10;            if (reasons != null) {&#10;                if (useIdSystem) {&#10;                    // ID System: Show IDs with reasons in brackets&#10;                    for (String id : reasons.getKeys(false)) {&#10;                        String reason = reasons.getString(id + &quot;.reason&quot;);&#10;                        if (id.startsWith(args[1]) || (reason != null &amp;&amp; reason.toLowerCase().startsWith(args[1].toLowerCase()))) {&#10;                            completions.add(id);&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Direct Reason System: Show available reasons&#10;                    for (String id : reasons.getKeys(false)) {&#10;                        String reason = reasons.getString(id + &quot;.reason&quot;);&#10;                        if (reason != null &amp;&amp; reason.toLowerCase().startsWith(args[1].toLowerCase())) {&#10;                            completions.add(reason);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        return completions;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.TabCompleter;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class BanTabCompleter implements TabCompleter {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public BanTabCompleter(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; onTabComplete(CommandSender sender, Command command, String label, String[] args) {&#10;        List&lt;String&gt; completions = new ArrayList&lt;&gt;();&#10;&#10;        if (args.length == 1) {&#10;            String input = args[0].toLowerCase();&#10;            // Zeige Online-Spieler für das erste Argument&#10;            for (Player player : Bukkit.getOnlinePlayers()) {&#10;                if (player.getName().toLowerCase().startsWith(input)) {&#10;                    completions.add(player.getName());&#10;                }&#10;            }&#10;        } else if (args.length == 2) {&#10;            String input = args[1].toLowerCase();&#10;            boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.&quot; + command.getName(), true);&#10;            String section = command.getName().equals(&quot;ban&quot;) ? &quot;bans&quot; : &quot;mutes&quot;;&#10;            ConfigurationSection reasons = plugin.getConfig().getConfigurationSection(section);&#10;&#10;            if (reasons != null) {&#10;                if (useIdSystem) {&#10;                    // ID-System: Zeige IDs&#10;                    completions.addAll(reasons.getKeys(false).stream()&#10;                        .filter(id -&gt; id.startsWith(input) || &#10;                                    reasons.getString(id + &quot;.reason&quot;, &quot;&quot;).toLowerCase().startsWith(input))&#10;                        .collect(Collectors.toList()));&#10;                } else {&#10;                    // Direktes System: Zeige Gründe&#10;                    completions.addAll(reasons.getKeys(false).stream()&#10;                        .map(id -&gt; reasons.getString(id + &quot;.reason&quot;))&#10;                        .filter(reason -&gt; reason != null &amp;&amp; reason.toLowerCase().startsWith(input))&#10;                        .collect(Collectors.toList()));&#10;                }&#10;            }&#10;        }&#10;&#10;        return completions;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ChatListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/ChatListener.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.EventPriority;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.AsyncPlayerChatEvent;&#10;&#10;public class ChatListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public ChatListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler(priority = EventPriority.LOWEST)&#10;    public void onPlayerChat(AsyncPlayerChatEvent event) {&#10;        Player player = event.getPlayer();&#10;        String uuid = player.getUniqueId().toString();&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + uuid)) {&#10;            // Check if mute has expired&#10;            long expireTime = plugin.getBansConfig().getLong(&quot;muted-players.&quot; + uuid + &quot;.expires&quot;);&#10;&#10;            if (System.currentTimeMillis() &gt;= expireTime) {&#10;                // Mute has expired, remove it&#10;                plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid, null);&#10;                plugin.saveBansConfig();&#10;                return;&#10;            }&#10;&#10;            // Get mute details&#10;            String reason = plugin.getBansConfig().getString(&quot;muted-players.&quot; + uuid + &quot;.reason&quot;);&#10;            long remainingTime = expireTime - System.currentTimeMillis();&#10;            String duration = formatDuration(remainingTime);&#10;&#10;            // Cancel the chat event&#10;            event.setCancelled(true);&#10;&#10;            // Send muted message&#10;            String muteMessage = plugin.getConfig().getString(&quot;messages.chat-while-muted&quot;,&#10;                &quot;&amp;cYou are muted for {duration}! Reason: {reason}&quot;)&#10;                .replace(&quot;{duration}&quot;, duration)&#10;                .replace(&quot;{reason}&quot;, reason);&#10;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long milliseconds) {&#10;        long seconds = milliseconds / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot;d &quot; + hours % 24 + &quot;h&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot;h &quot; + minutes % 60 + &quot;m&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot;m &quot; + seconds % 60 + &quot;s&quot;;&#10;        } else {&#10;            return seconds + &quot;s&quot;;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.EventPriority;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.AsyncPlayerChatEvent;&#10;&#10;public class ChatListener implements Listener {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public ChatListener(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)&#10;    public void onPlayerChat(AsyncPlayerChatEvent event) {&#10;        Player player = event.getPlayer();&#10;        String uuid = player.getUniqueId().toString();&#10;        String path = &quot;muted-players.&quot; + uuid;&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Checking mute status for &quot; + player.getName());&#10;        plugin.getLogger().info(&quot;Checking path: &quot; + path);&#10;        plugin.getLogger().info(&quot;Contains path: &quot; + plugin.getBansConfig().contains(path));&#10;&#10;        if (plugin.getBansConfig().contains(path)) {&#10;            long expireTime = plugin.getBansConfig().getLong(path + &quot;.expires&quot;);&#10;            plugin.getLogger().info(&quot;Expire time: &quot; + expireTime + &quot;, Current time: &quot; + System.currentTimeMillis());&#10;            &#10;            if (System.currentTimeMillis() &gt;= expireTime) {&#10;                plugin.getLogger().info(&quot;Mute expired, removing...&quot;);&#10;                plugin.getBansConfig().set(path, null);&#10;                plugin.saveBansConfig();&#10;                return;&#10;            }&#10;&#10;            String reason = plugin.getBansConfig().getString(path + &quot;.reason&quot;);&#10;            long remainingTime = expireTime - System.currentTimeMillis();&#10;            String duration = formatDuration(remainingTime);&#10;&#10;            event.setCancelled(true);&#10;            &#10;            String muteMessage = plugin.getConfig().getString(&quot;messages.chat-while-muted&quot;, &#10;                &quot;&amp;cYou are muted for {duration}! Reason: {reason}&quot;)&#10;                .replace(&quot;{duration}&quot;, duration)&#10;                .replace(&quot;{reason}&quot;, reason);&#10;            &#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;            plugin.getLogger().info(&quot;Blocked chat message from muted player: &quot; + player.getName());&#10;        }&#10;    }&#10;&#10;    private String formatDuration(long milliseconds) {&#10;        long seconds = milliseconds / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;        long days = hours / 24;&#10;&#10;        if (days &gt; 0) {&#10;            return days + &quot;d &quot; + hours % 24 + &quot;h&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot;h &quot; + minutes % 60 + &quot;m&quot;;&#10;        } else if (minutes &gt; 0) {&#10;            return minutes + &quot;m &quot; + seconds % 60 + &quot;s&quot;;&#10;        } else {&#10;            return seconds + &quot;s&quot;;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/KickCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/KickCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import java.util.Set;&#10;&#10;public class KickCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public KickCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Check permission&#10;        if (!sender.hasPermission(&quot;banplugin.kick&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check arguments&#10;        if (args.length == 0) {&#10;            showKickUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-kick&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;&#10;        // Join all arguments after player name as the reason&#10;        StringBuilder reasonBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            reasonBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                reasonBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String reason = reasonBuilder.toString();&#10;&#10;        // Get online player&#10;        Player target = Bukkit.getPlayer(playerName);&#10;        if (target == null) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check if target has kick bypass permission&#10;        if (target.hasPermission(&quot;banplugin.kick.bypass&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-kick-staff&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Kick the player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-kicked&quot;)&#10;                .replace(&quot;{reason}&quot;, reason);&#10;        target.kickPlayer(colorize(kickMessage));&#10;&#10;        // Send success message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.kick-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showKickUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        String header = plugin.getConfig().getString(&quot;usage-format.kick-command.header&quot;, &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;);&#10;        String listHeader = plugin.getConfig().getString(&quot;usage-format.kick-command.list-header&quot;, &quot;&amp;cKick Command Help:&quot;);&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;        sender.sendMessage(colorize(&quot;&amp;7Write your own kick reason after the player name.&quot;));&#10;        sender.sendMessage(colorize(&quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;));&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;&#10;public class KickCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public KickCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.kick&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Show usage if no arguments&#10;        if (args.length == 0) {&#10;            showKickUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        // Need at least player and one word for reason&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.usage-kick&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        Player target = Bukkit.getPlayer(playerName);&#10;&#10;        // Check if player is online&#10;        if (target == null) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.player-not-online&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Check bypass permission (skip for console)&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; target.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;            sender.sendMessage(colorize(plugin.getConfig().getString(&quot;messages.cannot-kick-staff&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Combine all arguments after player name for reason&#10;        StringBuilder reasonBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            reasonBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                reasonBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String reason = reasonBuilder.toString();&#10;&#10;        // Kick player&#10;        String kickMessage = plugin.getConfig().getString(&quot;messages.player-kicked&quot;)&#10;                .replace(&quot;{reason}&quot;, reason);&#10;        target.kickPlayer(colorize(kickMessage));&#10;&#10;        // Send success message&#10;        String successMessage = plugin.getConfig().getString(&quot;messages.kick-success&quot;)&#10;                .replace(&quot;{player}&quot;, target.getName())&#10;                .replace(&quot;{reason}&quot;, reason);&#10;        sender.sendMessage(colorize(successMessage));&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showKickUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;);&#10;        String header = plugin.getConfig().getString(&quot;usage-format.kick-command.header&quot;);&#10;        String listHeader = plugin.getConfig().getString(&quot;usage-format.kick-command.list-header&quot;);&#10;        String info = plugin.getConfig().getString(&quot;usage-format.kick-command.info&quot;);&#10;        String example = plugin.getConfig().getString(&quot;usage-format.kick-command.example&quot;);&#10;&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(header));&#10;        sender.sendMessage(colorize(divider));&#10;        sender.sendMessage(colorize(listHeader));&#10;        sender.sendMessage(colorize(info));&#10;        sender.sendMessage(colorize(example));&#10;        sender.sendMessage(colorize(divider));&#10;    }&#10;&#10;    private String colorize(String message) {&#10;        return ChatColor.translateAlternateColorCodes('&amp;', message);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/MuteCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        String input = args[1];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline() &amp;&amp; !(sender instanceof ConsoleCommandSender)) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', plugin.getConfig().getString(&quot;messages.cannot-mute-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long expiryTime = System.currentTimeMillis() + parseDuration(duration);&#10;&#10;        String uuid = target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.expires&quot;, expiryTime);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-by&quot;, sender instanceof ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName());&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-at&quot;, System.currentTimeMillis());&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + uuid + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        plugin.saveBansConfig();&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Sekunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minuten zu Millisekunden&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Stunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Tage zu Millisekunden&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;import org.bukkit.configuration.ConfigurationSection;&#10;import org.bukkit.entity.Player;&#10;&#10;public class MuteCommand implements CommandExecutor {&#10;    private final BanPlugin plugin;&#10;&#10;    public MuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.mute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            showMuteUsage(sender);&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 2) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-mute&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        // Combine all arguments after player name for the reason/id&#10;        StringBuilder inputBuilder = new StringBuilder();&#10;        for (int i = 1; i &lt; args.length; i++) {&#10;            inputBuilder.append(args[i]);&#10;            if (i &lt; args.length - 1) {&#10;                inputBuilder.append(&quot; &quot;);&#10;            }&#10;        }&#10;        String input = inputBuilder.toString();&#10;&#10;        // Find the mute entry either by ID or reason&#10;        String muteId = null;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;&#10;        if (useIdSystem) {&#10;            // Using ID system&#10;            if (!mutes.contains(input)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    plugin.getConfig().getString(&quot;messages.invalid-mute-id&quot;)));&#10;                return true;&#10;            }&#10;            muteId = input;&#10;        } else {&#10;            // Using reason system - find the ID by reason&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                if (reason != null &amp;&amp; reason.equalsIgnoreCase(input)) {&#10;                    muteId = id;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (muteId == null) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    &quot;&amp;cInvalid mute reason! Use TAB to see available reasons.&quot;));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        // Only check for bypass permission if target is online and sender is not console&#10;        if (target.isOnline() &amp;&amp; !(sender instanceof ConsoleCommandSender)) {&#10;            Player onlineTarget = (Player) target;&#10;            if (onlineTarget.hasPermission(&quot;banplugin.bypass&quot;)) {&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', plugin.getConfig().getString(&quot;messages.cannot-mute-staff&quot;)));&#10;                return true;&#10;            }&#10;        }&#10;&#10;        if (plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.already-muted&quot;).replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        String reason = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.reason&quot;);&#10;        String duration = plugin.getConfig().getString(&quot;mutes.&quot; + muteId + &quot;.duration&quot;);&#10;        long expiryTime = System.currentTimeMillis() + parseDuration(duration);&#10;&#10;        String uuid = target.getUniqueId().toString();&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.reason&quot;, reason);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.expires&quot;, expiryTime);&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-by&quot;, sender instanceof ConsoleCommandSender ? &quot;CONSOLE&quot; : sender.getName());&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + uuid + &quot;.muted-at&quot;, System.currentTimeMillis());&#10;&#10;        // Debug output&#10;        plugin.getLogger().info(&quot;Muting player &quot; + target.getName() + &quot; (UUID: &quot; + uuid + &quot;)&quot;);&#10;        plugin.getLogger().info(&quot;Mute data: reason=&quot; + reason + &quot;, expires=&quot; + expiryTime);&#10;&#10;        plugin.saveBansConfig();&#10;        // Reload the config to ensure it's saved&#10;        plugin.reloadBansConfig();&#10;&#10;        String muteMessage = plugin.getConfig().getString(&quot;messages.mute-success&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName())&#10;            .replace(&quot;{reason}&quot;, reason)&#10;            .replace(&quot;{duration}&quot;, duration);&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', muteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-muted&quot;)&#10;                .replace(&quot;{reason}&quot;, reason)&#10;                .replace(&quot;{expires}&quot;, duration);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showMuteUsage(CommandSender sender) {&#10;        String divider = plugin.getConfig().getString(&quot;usage-format.divider&quot;, &quot;&amp;7&amp;m--------------------------------&quot;);&#10;        boolean useIdSystem = plugin.getConfig().getBoolean(&quot;settings.use-id-system.mute&quot;, true);&#10;&#10;        String header = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.header&quot;, &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;) :&#10;            &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;reason&gt;&quot;;&#10;&#10;        String listHeader = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.list-header&quot;, &quot;&amp;cAvailable Mute IDs:&quot;) :&#10;            &quot;&amp;cAvailable Mute Reasons:&quot;;&#10;&#10;        String format = useIdSystem ?&#10;            plugin.getConfig().getString(&quot;usage-format.mute-command.format&quot;, &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;) :&#10;            &quot;&amp;7Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;;&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', header));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', listHeader));&#10;&#10;        ConfigurationSection mutes = plugin.getConfig().getConfigurationSection(&quot;mutes&quot;);&#10;        if (mutes != null) {&#10;            for (String id : mutes.getKeys(false)) {&#10;                String reason = mutes.getString(id + &quot;.reason&quot;);&#10;                String duration = mutes.getString(id + &quot;.duration&quot;);&#10;                String line = format&#10;                    .replace(&quot;{id}&quot;, id)&#10;                    .replace(&quot;{reason}&quot;, reason)&#10;                    .replace(&quot;{duration}&quot;, duration);&#10;                sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;            }&#10;        }&#10;&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', divider));&#10;    }&#10;&#10;    private long parseDuration(String duration) {&#10;        if (duration == null) return 0;&#10;&#10;        long multiplier;&#10;        if (duration.endsWith(&quot;s&quot;)) {&#10;            multiplier = 1000; // Sekunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;m&quot;)) {&#10;            multiplier = 1000 * 60; // Minuten zu Millisekunden&#10;        } else if (duration.endsWith(&quot;h&quot;)) {&#10;            multiplier = 1000 * 60 * 60; // Stunden zu Millisekunden&#10;        } else if (duration.endsWith(&quot;d&quot;)) {&#10;            multiplier = 1000 * 60 * 60 * 24; // Tage zu Millisekunden&#10;        } else {&#10;            return 0;&#10;        }&#10;&#10;        try {&#10;            String numberPart = duration.substring(0, duration.length() - 1);&#10;            return Long.parseLong(numberPart) * multiplier;&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/viirless/smartban/UnmuteCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/viirless/smartban/UnmuteCommand.java" />
              <option name="originalContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;&#10;public class UnmuteCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public UnmuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-unmute&quot;, &quot;&amp;cUsage: /unmute &lt;player&gt;&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        if (!plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.not-muted&quot;, &quot;&amp;cPlayer is not muted!&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        // Remove mute from config&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + target.getUniqueId().toString(), null);&#10;        plugin.saveBansConfig();&#10;&#10;        // Send success messages&#10;        String unmuteMessage = plugin.getConfig().getString(&quot;messages.unmute-success&quot;, &quot;&amp;aSuccessfully unmuted {player}&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName());&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', unmuteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-unmuted&quot;, &quot;&amp;aYou have been unmuted!&quot;);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.viirless.smartban;&#10;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.OfflinePlayer;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.command.ConsoleCommandSender;&#10;&#10;public class UnmuteCommand implements CommandExecutor {&#10;&#10;    private final BanPlugin plugin;&#10;&#10;    public UnmuteCommand(BanPlugin plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        // Skip permission check if sender is console&#10;        if (!(sender instanceof ConsoleCommandSender) &amp;&amp; !sender.hasPermission(&quot;banplugin.unmute&quot;)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#10;                plugin.getConfig().getString(&quot;messages.no-permission&quot;, &quot;&amp;cYou don't have permission to use this command!&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length &lt; 1) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.usage-unmute&quot;, &quot;&amp;cUsage: /unmute &lt;player&gt;&quot;)));&#10;            return true;&#10;        }&#10;&#10;        String playerName = args[0];&#10;        OfflinePlayer target = Bukkit.getOfflinePlayer(playerName);&#10;&#10;        if (!plugin.getBansConfig().contains(&quot;muted-players.&quot; + target.getUniqueId().toString())) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                plugin.getConfig().getString(&quot;messages.not-muted&quot;, &quot;&amp;cPlayer is not muted!&quot;)&#10;                    .replace(&quot;{player}&quot;, target.getName())));&#10;            return true;&#10;        }&#10;&#10;        // Remove mute from config&#10;        plugin.getBansConfig().set(&quot;muted-players.&quot; + target.getUniqueId().toString(), null);&#10;        plugin.saveBansConfig();&#10;&#10;        // Send success messages&#10;        String unmuteMessage = plugin.getConfig().getString(&quot;messages.unmute-success&quot;, &quot;&amp;aSuccessfully unmuted {player}&quot;)&#10;            .replace(&quot;{player}&quot;, target.getName());&#10;        sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', unmuteMessage));&#10;&#10;        if (target.isOnline()) {&#10;            String playerMessage = plugin.getConfig().getString(&quot;messages.player-unmuted&quot;, &quot;&amp;aYou have been unmuted!&quot;);&#10;            target.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&amp;', playerMessage));&#10;        }&#10;&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/config.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/config.yml" />
              <option name="originalContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;&#10;" />
              <option name="updatedContent" value="# Ban Plugin Configuration&#10;# Configure ban reasons, durations, and IDs&#10;&#10;settings:&#10;  use-id-system:&#10;    ban: true    # true = use IDs (1,2,3), false = use reasons directly&#10;    mute: true   # true = use IDs (1,2,3), false = use reasons directly&#10;&#10;bans:&#10;  1:&#10;    reason: &quot;Cheating/Hacking&quot;&#10;    duration: &quot;30d&quot;&#10;  2:&#10;    reason: &quot;Griefing&quot;&#10;    duration: &quot;7d&quot;&#10;  3:&#10;    reason: &quot;Spam/Advertising&quot;&#10;    duration: &quot;1h&quot;&#10;  4:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;  5:&#10;    reason: &quot;Exploiting&quot;&#10;    duration: &quot;14d&quot;&#10;  6:&#10;    reason: &quot;Inappropriate Username&quot;&#10;    duration: &quot;1d&quot;&#10;  7:&#10;    reason: &quot;Ban Evasion&quot;&#10;    duration: &quot;60d&quot;&#10;  8:&#10;    reason: &quot;Staff Disrespect&quot;&#10;    duration: &quot;2d&quot;&#10;&#10;mutes:&#10;  1:&#10;    reason: &quot;Chat Spam&quot;&#10;    duration: &quot;1h&quot;&#10;  2:&#10;    reason: &quot;Insulting Players&quot;&#10;    duration: &quot;2h&quot;&#10;  3:&#10;    reason: &quot;Racism&quot;&#10;    duration: &quot;7d&quot;&#10;  4:&#10;    reason: &quot;Advertising&quot;&#10;    duration: &quot;1d&quot;&#10;  5:&#10;    reason: &quot;Toxic Behavior&quot;&#10;    duration: &quot;3d&quot;&#10;&#10;# Duration format:&#10;# s = seconds, m = minutes, h = hours, d = days&#10;# Examples: 30s, 5m, 2h, 7d&#10;&#10;# Messages&#10;messages:&#10;  ban-success: &quot;&amp;aSuccessfully banned &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unban-success: &quot;&amp;aSuccessfully unbanned &amp;c{player}&quot;&#10;  kick-success: &quot;&amp;aSuccessfully kicked &amp;c{player} &amp;afor &amp;e{reason}&quot;&#10;  player-not-found: &quot;&amp;cPlayer not found!&quot;&#10;  player-not-online: &quot;&amp;cPlayer is not online!&quot;&#10;  invalid-ban-id: &quot;&amp;cInvalid ban ID! Available IDs: {ids}&quot;&#10;  no-permission: &quot;&amp;cYou don't have permission to use this command!&quot;&#10;  player-banned: &quot;&amp;cYou are banned from this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-kicked: &quot;&amp;cYou have been kicked from the server!\n&amp;cReason: &amp;e{reason}&quot;&#10;  already-banned: &quot;&amp;c{player} is already banned!&quot;&#10;  not-banned: &quot;&amp;c{player} is not banned!&quot;&#10;  cannot-ban-staff: &quot;&amp;cYou cannot ban this player - they have bypass permission!&quot;&#10;  cannot-kick-staff: &quot;&amp;cYou cannot kick this player - they have bypass permission!&quot;&#10;  usage-ban: &quot;&amp;cUsage: /ban &lt;player&gt; &lt;id&gt;&quot;&#10;  usage-unban: &quot;&amp;cUsage: /unban &lt;player&gt;&quot;&#10;  usage-kick: &quot;&amp;cUsage: /kick &lt;player&gt; &lt;reason&gt;&quot;&#10;  mute-success: &quot;&amp;aSuccessfully muted &amp;c{player} &amp;afor &amp;e{reason} &amp;afor &amp;c{duration}&quot;&#10;  unmute-success: &quot;&amp;aSuccessfully unmuted &amp;c{player}&quot;&#10;  player-muted: &quot;&amp;cYou have been muted in this server!\n&amp;cReason: &amp;e{reason}\n&amp;cExpires: &amp;e{expires}&quot;&#10;  player-unmuted: &quot;&amp;cYou have been unmuted in this server!&quot;&#10;  already-muted: &quot;&amp;c{player} is already muted!&quot;&#10;  not-muted: &quot;&amp;c{player} is not muted!&quot;&#10;  cannot-mute-staff: &quot;&amp;cYou cannot mute this player - they have bypass permission!&quot;&#10;  usage-mute: &quot;&amp;cUsage: /mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;  invalid-mute-id: &quot;&amp;cInvalid mute ID! Available IDs: {ids}&quot;&#10;&#10;usage-format:&#10;  divider: &quot;&amp;7&amp;m--------------------------------&quot;&#10;  ban-command:&#10;    header: &quot;&amp;cUsage: &amp;7/ban &lt;player&gt; &lt;ban-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Ban IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  mute-command:&#10;    header: &quot;&amp;cUsage: &amp;7/mute &lt;player&gt; &lt;mute-id&gt;&quot;&#10;    list-header: &quot;&amp;cAvailable Mute IDs:&quot;&#10;    format: &quot;&amp;7ID: &amp;c{id} &amp;7| Reason: &amp;c{reason} &amp;7| Duration: &amp;c{duration}&quot;&#10;  kick-command:&#10;    header: &quot;&amp;cUsage: &amp;7/kick &lt;player&gt; &lt;reason&gt;&quot;&#10;    list-header: &quot;&amp;cKick Command Help:&quot;&#10;    info: &quot;&amp;7Write your custom kick reason after the player name.&quot;&#10;    example: &quot;&amp;7Example: &amp;c/kick Player1 Breaking the rules&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/plugin.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/plugin.yml" />
              <option name="originalContent" value="name: Smartban&#10;version: '1.2-SNAPSHOT'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;    permission: banplugin.ban&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;    permission: banplugin.unban&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;    permission: banplugin.kick&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: false&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: false&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: false&#10;  banplugin.bypass:&#10;    description: Prevents being banned by other staff members&#10;    default: false&#10;  banplugin.kick.bypass:&#10;    description: Prevents being kicked by other staff members&#10;    default: false&#10;  banplugin.admin:&#10;    description: Full ban plugin access&#10;    default: false&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;  banplugin.*:&#10;    description: All ban plugin permissions&#10;    default: false&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true&#10;      banplugin.kick.bypass: true" />
              <option name="updatedContent" value="name: Smartban&#10;version: '1.2-SNAPSHOT'&#10;main: org.viirless.smartban.BanPlugin&#10;api-version: '1.21'&#10;&#10;commands:&#10;  ban:&#10;    description: Ban a player with configurable reasons&#10;    usage: /ban &lt;player&gt; &lt;id&gt;&#10;    permission: banplugin.ban&#10;  unban:&#10;    description: Unban a player&#10;    usage: /unban &lt;player&gt;&#10;    permission: banplugin.unban&#10;  kick:&#10;    description: Kick a player with a custom reason&#10;    usage: /kick &lt;player&gt; &lt;reason&gt;&#10;    permission: banplugin.kick&#10;&#10;permissions:&#10;  banplugin.ban:&#10;    description: Allows banning players&#10;    default: false&#10;  banplugin.unban:&#10;    description: Allows unbanning players&#10;    default: false&#10;  banplugin.kick:&#10;    description: Allows kicking players&#10;    default: false&#10;  banplugin.bypass:&#10;    description: Prevents being banned by other staff members&#10;    default: false&#10;  banplugin.kick.bypass:&#10;    description: Prevents being kicked by other staff members&#10;    default: false&#10;  banplugin.admin:&#10;    description: Full ban plugin access&#10;    default: false&#10;    children:&#10;      banplugin.ban: true&#10;      banplugin.unban: true&#10;      banplugin.kick: true&#10;  banplugin.*:&#10;    description: All ban plugin permissions&#10;    default: false&#10;    children:&#10;      banplugin.admin: true&#10;      banplugin.bypass: true&#10;      banplugin.kick.bypass: true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>